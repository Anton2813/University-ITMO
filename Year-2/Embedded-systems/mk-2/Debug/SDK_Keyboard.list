
SDK_Keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bb8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000291c  08002d40  08002d40  00012d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800565c  0800565c  0001565c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005664  08005664  00015664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005668  08005668  00015668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000ae4  20000000  0800566c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020ae4  2**0
                  CONTENTS
  8 .bss          000004fc  20000ae4  20000ae4  00020ae4  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000fe0  20000fe0  00020ae4  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020ae4  2**0
                  CONTENTS, READONLY
 11 .debug_info   000132a9  00000000  00000000  00020b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002b39  00000000  00000000  00033dbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    0000ce00  00000000  00000000  000368f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  000436f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00044608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022443  00000000  00000000  00045470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017189  00000000  00000000  000678b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cac1f  00000000  00000000  0007ea3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014965b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028c8  00000000  00000000  001496ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000ae4 	.word	0x20000ae4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002d28 	.word	0x08002d28

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000ae8 	.word	0x20000ae8
 80001c4:	08002d28 	.word	0x08002d28

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004dc:	b510      	push	{r4, lr}
 80004de:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e0:	4b0e      	ldr	r3, [pc, #56]	; (800051c <HAL_InitTick+0x40>)
 80004e2:	7818      	ldrb	r0, [r3, #0]
 80004e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e8:	fbb3 f3f0 	udiv	r3, r3, r0
 80004ec:	4a0c      	ldr	r2, [pc, #48]	; (8000520 <HAL_InitTick+0x44>)
 80004ee:	6810      	ldr	r0, [r2, #0]
 80004f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f4:	f000 f8a0 	bl	8000638 <HAL_SYSTICK_Config>
 80004f8:	b968      	cbnz	r0, 8000516 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004fa:	2c0f      	cmp	r4, #15
 80004fc:	d901      	bls.n	8000502 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80004fe:	2001      	movs	r0, #1
 8000500:	e00a      	b.n	8000518 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000502:	2200      	movs	r2, #0
 8000504:	4621      	mov	r1, r4
 8000506:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800050a:	f000 f85d 	bl	80005c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800050e:	4b03      	ldr	r3, [pc, #12]	; (800051c <HAL_InitTick+0x40>)
 8000510:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000512:	2000      	movs	r0, #0
 8000514:	e000      	b.n	8000518 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000516:	2001      	movs	r0, #1
}
 8000518:	bd10      	pop	{r4, pc}
 800051a:	bf00      	nop
 800051c:	20000000 	.word	0x20000000
 8000520:	20000ae0 	.word	0x20000ae0

08000524 <HAL_Init>:
{
 8000524:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <HAL_Init+0x30>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800052e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000536:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800053e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000540:	2003      	movs	r0, #3
 8000542:	f000 f82f 	bl	80005a4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000546:	2000      	movs	r0, #0
 8000548:	f7ff ffc8 	bl	80004dc <HAL_InitTick>
  HAL_MspInit();
 800054c:	f002 fa78 	bl	8002a40 <HAL_MspInit>
}
 8000550:	2000      	movs	r0, #0
 8000552:	bd08      	pop	{r3, pc}
 8000554:	40023c00 	.word	0x40023c00

08000558 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000558:	4a03      	ldr	r2, [pc, #12]	; (8000568 <HAL_IncTick+0x10>)
 800055a:	6811      	ldr	r1, [r2, #0]
 800055c:	4b03      	ldr	r3, [pc, #12]	; (800056c <HAL_IncTick+0x14>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	440b      	add	r3, r1
 8000562:	6013      	str	r3, [r2, #0]
}
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	20000b00 	.word	0x20000b00
 800056c:	20000000 	.word	0x20000000

08000570 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000570:	4b01      	ldr	r3, [pc, #4]	; (8000578 <HAL_GetTick+0x8>)
 8000572:	6818      	ldr	r0, [r3, #0]
}
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	20000b00 	.word	0x20000b00

0800057c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800057c:	b538      	push	{r3, r4, r5, lr}
 800057e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000580:	f7ff fff6 	bl	8000570 <HAL_GetTick>
 8000584:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000586:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800058a:	d002      	beq.n	8000592 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800058c:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <HAL_Delay+0x24>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000592:	f7ff ffed 	bl	8000570 <HAL_GetTick>
 8000596:	1b40      	subs	r0, r0, r5
 8000598:	42a0      	cmp	r0, r4
 800059a:	d3fa      	bcc.n	8000592 <HAL_Delay+0x16>
  {
  }
}
 800059c:	bd38      	pop	{r3, r4, r5, pc}
 800059e:	bf00      	nop
 80005a0:	20000000 	.word	0x20000000

080005a4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a4:	4a07      	ldr	r2, [pc, #28]	; (80005c4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005a6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005ac:	041b      	lsls	r3, r3, #16
 80005ae:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005b0:	0200      	lsls	r0, r0, #8
 80005b2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005b6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80005b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80005c0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80005c2:	4770      	bx	lr
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005c8:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005ca:	4b19      	ldr	r3, [pc, #100]	; (8000630 <HAL_NVIC_SetPriority+0x68>)
 80005cc:	68db      	ldr	r3, [r3, #12]
 80005ce:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d2:	f1c3 0c07 	rsb	ip, r3, #7
 80005d6:	f1bc 0f04 	cmp.w	ip, #4
 80005da:	bf28      	it	cs
 80005dc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e0:	f103 0e04 	add.w	lr, r3, #4
 80005e4:	f1be 0f06 	cmp.w	lr, #6
 80005e8:	d918      	bls.n	800061c <HAL_NVIC_SetPriority+0x54>
 80005ea:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ec:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80005f0:	fa0e fc0c 	lsl.w	ip, lr, ip
 80005f4:	ea21 010c 	bic.w	r1, r1, ip
 80005f8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005fa:	fa0e f303 	lsl.w	r3, lr, r3
 80005fe:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000602:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000604:	2800      	cmp	r0, #0
 8000606:	db0b      	blt.n	8000620 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000608:	0109      	lsls	r1, r1, #4
 800060a:	b2c9      	uxtb	r1, r1
 800060c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000610:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000614:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000618:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800061c:	2300      	movs	r3, #0
 800061e:	e7e5      	b.n	80005ec <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000620:	f000 000f 	and.w	r0, r0, #15
 8000624:	0109      	lsls	r1, r1, #4
 8000626:	b2c9      	uxtb	r1, r1
 8000628:	4b02      	ldr	r3, [pc, #8]	; (8000634 <HAL_NVIC_SetPriority+0x6c>)
 800062a:	5419      	strb	r1, [r3, r0]
 800062c:	e7f4      	b.n	8000618 <HAL_NVIC_SetPriority+0x50>
 800062e:	bf00      	nop
 8000630:	e000ed00 	.word	0xe000ed00
 8000634:	e000ed14 	.word	0xe000ed14

08000638 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000638:	3801      	subs	r0, #1
 800063a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800063e:	d20b      	bcs.n	8000658 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000640:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000644:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000646:	4a05      	ldr	r2, [pc, #20]	; (800065c <HAL_SYSTICK_Config+0x24>)
 8000648:	21f0      	movs	r1, #240	; 0xf0
 800064a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800064e:	2000      	movs	r0, #0
 8000650:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000652:	2207      	movs	r2, #7
 8000654:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000656:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000658:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800065a:	4770      	bx	lr
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000660:	2300      	movs	r3, #0
 8000662:	2b0f      	cmp	r3, #15
 8000664:	f200 80da 	bhi.w	800081c <HAL_GPIO_Init+0x1bc>
{
 8000668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800066a:	b083      	sub	sp, #12
 800066c:	e03a      	b.n	80006e4 <HAL_GPIO_Init+0x84>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800066e:	2207      	movs	r2, #7
 8000670:	e000      	b.n	8000674 <HAL_GPIO_Init+0x14>
 8000672:	2200      	movs	r2, #0
 8000674:	40aa      	lsls	r2, r5
 8000676:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000678:	3402      	adds	r4, #2
 800067a:	4d69      	ldr	r5, [pc, #420]	; (8000820 <HAL_GPIO_Init+0x1c0>)
 800067c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000680:	4a68      	ldr	r2, [pc, #416]	; (8000824 <HAL_GPIO_Init+0x1c4>)
 8000682:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000684:	ea6f 020c 	mvn.w	r2, ip
 8000688:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800068c:	684e      	ldr	r6, [r1, #4]
 800068e:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8000692:	d001      	beq.n	8000698 <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 8000694:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 8000698:	4c62      	ldr	r4, [pc, #392]	; (8000824 <HAL_GPIO_Init+0x1c4>)
 800069a:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 800069c:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800069e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006a2:	684e      	ldr	r6, [r1, #4]
 80006a4:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 80006a8:	d001      	beq.n	80006ae <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 80006aa:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80006ae:	4c5d      	ldr	r4, [pc, #372]	; (8000824 <HAL_GPIO_Init+0x1c4>)
 80006b0:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006b2:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80006b4:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006b8:	684e      	ldr	r6, [r1, #4]
 80006ba:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 80006be:	d001      	beq.n	80006c4 <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 80006c0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80006c4:	4c57      	ldr	r4, [pc, #348]	; (8000824 <HAL_GPIO_Init+0x1c4>)
 80006c6:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80006c8:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80006ca:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006cc:	684d      	ldr	r5, [r1, #4]
 80006ce:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 80006d2:	d001      	beq.n	80006d8 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 80006d4:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 80006d8:	4c52      	ldr	r4, [pc, #328]	; (8000824 <HAL_GPIO_Init+0x1c4>)
 80006da:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006dc:	3301      	adds	r3, #1
 80006de:	2b0f      	cmp	r3, #15
 80006e0:	f200 809a 	bhi.w	8000818 <HAL_GPIO_Init+0x1b8>
    ioposition = 0x01U << position;
 80006e4:	2201      	movs	r2, #1
 80006e6:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006e8:	680c      	ldr	r4, [r1, #0]
 80006ea:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80006ee:	ea32 0404 	bics.w	r4, r2, r4
 80006f2:	d1f3      	bne.n	80006dc <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006f4:	684c      	ldr	r4, [r1, #4]
 80006f6:	1e65      	subs	r5, r4, #1
 80006f8:	2d01      	cmp	r5, #1
 80006fa:	d903      	bls.n	8000704 <HAL_GPIO_Init+0xa4>
 80006fc:	2c11      	cmp	r4, #17
 80006fe:	d001      	beq.n	8000704 <HAL_GPIO_Init+0xa4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000700:	2c12      	cmp	r4, #18
 8000702:	d112      	bne.n	800072a <HAL_GPIO_Init+0xca>
        temp = GPIOx->OSPEEDR; 
 8000704:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000706:	005e      	lsls	r6, r3, #1
 8000708:	2403      	movs	r4, #3
 800070a:	40b4      	lsls	r4, r6
 800070c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000710:	68cc      	ldr	r4, [r1, #12]
 8000712:	40b4      	lsls	r4, r6
 8000714:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000716:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000718:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800071a:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800071e:	684c      	ldr	r4, [r1, #4]
 8000720:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8000724:	409a      	lsls	r2, r3
 8000726:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8000728:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800072a:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800072c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000730:	2403      	movs	r4, #3
 8000732:	fa04 f40e 	lsl.w	r4, r4, lr
 8000736:	43e2      	mvns	r2, r4
 8000738:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800073c:	688c      	ldr	r4, [r1, #8]
 800073e:	fa04 f40e 	lsl.w	r4, r4, lr
 8000742:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000744:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000746:	684c      	ldr	r4, [r1, #4]
 8000748:	2c02      	cmp	r4, #2
 800074a:	d001      	beq.n	8000750 <HAL_GPIO_Init+0xf0>
 800074c:	2c12      	cmp	r4, #18
 800074e:	d10f      	bne.n	8000770 <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3U];
 8000750:	08dd      	lsrs	r5, r3, #3
 8000752:	3508      	adds	r5, #8
 8000754:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000758:	f003 0407 	and.w	r4, r3, #7
 800075c:	00a6      	lsls	r6, r4, #2
 800075e:	240f      	movs	r4, #15
 8000760:	40b4      	lsls	r4, r6
 8000762:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000766:	690c      	ldr	r4, [r1, #16]
 8000768:	40b4      	lsls	r4, r6
 800076a:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3U] = temp;
 800076c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8000770:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000772:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000774:	684a      	ldr	r2, [r1, #4]
 8000776:	f002 0203 	and.w	r2, r2, #3
 800077a:	fa02 f20e 	lsl.w	r2, r2, lr
 800077e:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000780:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000782:	684a      	ldr	r2, [r1, #4]
 8000784:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000788:	d0a8      	beq.n	80006dc <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	2200      	movs	r2, #0
 800078c:	9201      	str	r2, [sp, #4]
 800078e:	4a26      	ldr	r2, [pc, #152]	; (8000828 <HAL_GPIO_Init+0x1c8>)
 8000790:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000792:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000796:	6454      	str	r4, [r2, #68]	; 0x44
 8000798:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800079a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800079e:	9201      	str	r2, [sp, #4]
 80007a0:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80007a2:	089c      	lsrs	r4, r3, #2
 80007a4:	1ca5      	adds	r5, r4, #2
 80007a6:	4a1e      	ldr	r2, [pc, #120]	; (8000820 <HAL_GPIO_Init+0x1c0>)
 80007a8:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007ac:	f003 0203 	and.w	r2, r3, #3
 80007b0:	0095      	lsls	r5, r2, #2
 80007b2:	220f      	movs	r2, #15
 80007b4:	40aa      	lsls	r2, r5
 80007b6:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007ba:	4a1c      	ldr	r2, [pc, #112]	; (800082c <HAL_GPIO_Init+0x1cc>)
 80007bc:	4290      	cmp	r0, r2
 80007be:	f43f af58 	beq.w	8000672 <HAL_GPIO_Init+0x12>
 80007c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007c6:	4290      	cmp	r0, r2
 80007c8:	d01a      	beq.n	8000800 <HAL_GPIO_Init+0x1a0>
 80007ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007ce:	4290      	cmp	r0, r2
 80007d0:	d018      	beq.n	8000804 <HAL_GPIO_Init+0x1a4>
 80007d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007d6:	4290      	cmp	r0, r2
 80007d8:	d016      	beq.n	8000808 <HAL_GPIO_Init+0x1a8>
 80007da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007de:	4290      	cmp	r0, r2
 80007e0:	d014      	beq.n	800080c <HAL_GPIO_Init+0x1ac>
 80007e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007e6:	4290      	cmp	r0, r2
 80007e8:	d012      	beq.n	8000810 <HAL_GPIO_Init+0x1b0>
 80007ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007ee:	4290      	cmp	r0, r2
 80007f0:	d010      	beq.n	8000814 <HAL_GPIO_Init+0x1b4>
 80007f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007f6:	4290      	cmp	r0, r2
 80007f8:	f43f af39 	beq.w	800066e <HAL_GPIO_Init+0xe>
 80007fc:	2208      	movs	r2, #8
 80007fe:	e739      	b.n	8000674 <HAL_GPIO_Init+0x14>
 8000800:	2201      	movs	r2, #1
 8000802:	e737      	b.n	8000674 <HAL_GPIO_Init+0x14>
 8000804:	2202      	movs	r2, #2
 8000806:	e735      	b.n	8000674 <HAL_GPIO_Init+0x14>
 8000808:	2203      	movs	r2, #3
 800080a:	e733      	b.n	8000674 <HAL_GPIO_Init+0x14>
 800080c:	2204      	movs	r2, #4
 800080e:	e731      	b.n	8000674 <HAL_GPIO_Init+0x14>
 8000810:	2205      	movs	r2, #5
 8000812:	e72f      	b.n	8000674 <HAL_GPIO_Init+0x14>
 8000814:	2206      	movs	r2, #6
 8000816:	e72d      	b.n	8000674 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000818:	b003      	add	sp, #12
 800081a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40013800 	.word	0x40013800
 8000824:	40013c00 	.word	0x40013c00
 8000828:	40023800 	.word	0x40023800
 800082c:	40020000 	.word	0x40020000

08000830 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000830:	6803      	ldr	r3, [r0, #0]
 8000832:	695a      	ldr	r2, [r3, #20]
 8000834:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000838:	d101      	bne.n	800083e <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 800083a:	2000      	movs	r0, #0
}
 800083c:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800083e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000842:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8000844:	2300      	movs	r3, #0
 8000846:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8000848:	2220      	movs	r2, #32
 800084a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800084e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000852:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000854:	f042 0204 	orr.w	r2, r2, #4
 8000858:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 800085a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 800085e:	2001      	movs	r0, #1
 8000860:	4770      	bx	lr

08000862 <I2C_WaitOnFlagUntilTimeout>:
{
 8000862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000866:	4607      	mov	r7, r0
 8000868:	460d      	mov	r5, r1
 800086a:	4690      	mov	r8, r2
 800086c:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800086e:	e024      	b.n	80008ba <I2C_WaitOnFlagUntilTimeout+0x58>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000870:	f7ff fe7e 	bl	8000570 <HAL_GetTick>
 8000874:	9b06      	ldr	r3, [sp, #24]
 8000876:	1ac0      	subs	r0, r0, r3
 8000878:	42b0      	cmp	r0, r6
 800087a:	d800      	bhi.n	800087e <I2C_WaitOnFlagUntilTimeout+0x1c>
 800087c:	b9ee      	cbnz	r6, 80008ba <I2C_WaitOnFlagUntilTimeout+0x58>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800087e:	2300      	movs	r3, #0
 8000880:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8000882:	2220      	movs	r2, #32
 8000884:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8000888:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800088c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800088e:	f042 0220 	orr.w	r2, r2, #32
 8000892:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000894:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 8000898:	2001      	movs	r0, #1
 800089a:	e01e      	b.n	80008da <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	699c      	ldr	r4, [r3, #24]
 80008a0:	ea25 0c04 	bic.w	ip, r5, r4
 80008a4:	fa1f fc8c 	uxth.w	ip, ip
 80008a8:	fabc fc8c 	clz	ip, ip
 80008ac:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80008b0:	45e0      	cmp	r8, ip
 80008b2:	d111      	bne.n	80008d8 <I2C_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 80008b4:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 80008b8:	d1da      	bne.n	8000870 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80008ba:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d1ec      	bne.n	800089c <I2C_WaitOnFlagUntilTimeout+0x3a>
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	ea25 0c03 	bic.w	ip, r5, r3
 80008ca:	fa1f fc8c 	uxth.w	ip, ip
 80008ce:	fabc fc8c 	clz	ip, ip
 80008d2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80008d6:	e7eb      	b.n	80008b0 <I2C_WaitOnFlagUntilTimeout+0x4e>
  return HAL_OK;
 80008d8:	2000      	movs	r0, #0
}
 80008da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080008de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80008de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008e2:	4605      	mov	r5, r0
 80008e4:	460e      	mov	r6, r1
 80008e6:	4617      	mov	r7, r2
 80008e8:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80008ea:	e03d      	b.n	8000968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80008f2:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80008f4:	682b      	ldr	r3, [r5, #0]
 80008f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80008fa:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000900:	2220      	movs	r2, #32
 8000902:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000906:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800090a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800090c:	f042 0204 	orr.w	r2, r2, #4
 8000910:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000912:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8000916:	2001      	movs	r0, #1
 8000918:	e034      	b.n	8000984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800091a:	f7ff fe29 	bl	8000570 <HAL_GetTick>
 800091e:	eba0 0008 	sub.w	r0, r0, r8
 8000922:	42b8      	cmp	r0, r7
 8000924:	d800      	bhi.n	8000928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 8000926:	b9ff      	cbnz	r7, 8000968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000928:	2300      	movs	r3, #0
 800092a:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800092c:	2220      	movs	r2, #32
 800092e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000932:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000936:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000938:	f042 0220 	orr.w	r2, r2, #32
 800093c:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800093e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8000942:	2001      	movs	r0, #1
 8000944:	e01e      	b.n	8000984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000946:	682b      	ldr	r3, [r5, #0]
 8000948:	699c      	ldr	r4, [r3, #24]
 800094a:	ea26 0404 	bic.w	r4, r6, r4
 800094e:	b2a4      	uxth	r4, r4
 8000950:	3c00      	subs	r4, #0
 8000952:	bf18      	it	ne
 8000954:	2401      	movne	r4, #1
 8000956:	b1a4      	cbz	r4, 8000982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000958:	682b      	ldr	r3, [r5, #0]
 800095a:	695a      	ldr	r2, [r3, #20]
 800095c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000960:	d1c4      	bne.n	80008ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8000962:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8000966:	d1d8      	bne.n	800091a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000968:	f3c6 4307 	ubfx	r3, r6, #16, #8
 800096c:	2b01      	cmp	r3, #1
 800096e:	d1ea      	bne.n	8000946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8000970:	682b      	ldr	r3, [r5, #0]
 8000972:	695c      	ldr	r4, [r3, #20]
 8000974:	ea26 0404 	bic.w	r4, r6, r4
 8000978:	b2a4      	uxth	r4, r4
 800097a:	3c00      	subs	r4, #0
 800097c:	bf18      	it	ne
 800097e:	2401      	movne	r4, #1
 8000980:	e7e9      	b.n	8000956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 8000982:	2000      	movs	r0, #0
}
 8000984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000988 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8000988:	b570      	push	{r4, r5, r6, lr}
 800098a:	4604      	mov	r4, r0
 800098c:	460d      	mov	r5, r1
 800098e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000990:	6823      	ldr	r3, [r4, #0]
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000998:	d11c      	bne.n	80009d4 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800099a:	4620      	mov	r0, r4
 800099c:	f7ff ff48 	bl	8000830 <I2C_IsAcknowledgeFailed>
 80009a0:	b9d0      	cbnz	r0, 80009d8 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80009a2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80009a6:	d0f3      	beq.n	8000990 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80009a8:	f7ff fde2 	bl	8000570 <HAL_GetTick>
 80009ac:	1b80      	subs	r0, r0, r6
 80009ae:	42a8      	cmp	r0, r5
 80009b0:	d801      	bhi.n	80009b6 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80009b2:	2d00      	cmp	r5, #0
 80009b4:	d1ec      	bne.n	8000990 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80009ba:	2220      	movs	r2, #32
 80009bc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80009c0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80009c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80009c6:	f042 0220 	orr.w	r2, r2, #32
 80009ca:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80009cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80009d0:	2001      	movs	r0, #1
 80009d2:	e000      	b.n	80009d6 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 80009d4:	2000      	movs	r0, #0
}
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80009d8:	2001      	movs	r0, #1
 80009da:	e7fc      	b.n	80009d6 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

080009dc <I2C_RequestMemoryWrite>:
{
 80009dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009e0:	b085      	sub	sp, #20
 80009e2:	4604      	mov	r4, r0
 80009e4:	460d      	mov	r5, r1
 80009e6:	4691      	mov	r9, r2
 80009e8:	461f      	mov	r7, r3
 80009ea:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80009ee:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80009f0:	6803      	ldr	r3, [r0, #0]
 80009f2:	6819      	ldr	r1, [r3, #0]
 80009f4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80009f8:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80009fa:	9600      	str	r6, [sp, #0]
 80009fc:	4643      	mov	r3, r8
 80009fe:	2200      	movs	r2, #0
 8000a00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000a04:	f7ff ff2d 	bl	8000862 <I2C_WaitOnFlagUntilTimeout>
 8000a08:	b960      	cbnz	r0, 8000a24 <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000a0a:	6823      	ldr	r3, [r4, #0]
 8000a0c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000a10:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000a12:	4633      	mov	r3, r6
 8000a14:	4642      	mov	r2, r8
 8000a16:	4926      	ldr	r1, [pc, #152]	; (8000ab0 <I2C_RequestMemoryWrite+0xd4>)
 8000a18:	4620      	mov	r0, r4
 8000a1a:	f7ff ff60 	bl	80008de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000a1e:	b168      	cbz	r0, 8000a3c <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8000a20:	2001      	movs	r0, #1
 8000a22:	e008      	b.n	8000a36 <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8000a24:	6823      	ldr	r3, [r4, #0]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000a2c:	d002      	beq.n	8000a34 <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000a2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a32:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8000a34:	2003      	movs	r0, #3
}
 8000a36:	b005      	add	sp, #20
 8000a38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	9303      	str	r3, [sp, #12]
 8000a40:	6823      	ldr	r3, [r4, #0]
 8000a42:	695a      	ldr	r2, [r3, #20]
 8000a44:	9203      	str	r2, [sp, #12]
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	9303      	str	r3, [sp, #12]
 8000a4a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000a4c:	4632      	mov	r2, r6
 8000a4e:	4641      	mov	r1, r8
 8000a50:	4620      	mov	r0, r4
 8000a52:	f7ff ff99 	bl	8000988 <I2C_WaitOnTXEFlagUntilTimeout>
 8000a56:	b930      	cbnz	r0, 8000a66 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000a58:	2f01      	cmp	r7, #1
 8000a5a:	d10f      	bne.n	8000a7c <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000a5c:	6823      	ldr	r3, [r4, #0]
 8000a5e:	fa5f f689 	uxtb.w	r6, r9
 8000a62:	611e      	str	r6, [r3, #16]
 8000a64:	e7e7      	b.n	8000a36 <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000a66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a68:	2b04      	cmp	r3, #4
 8000a6a:	d001      	beq.n	8000a70 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	e7e2      	b.n	8000a36 <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000a70:	6822      	ldr	r2, [r4, #0]
 8000a72:	6813      	ldr	r3, [r2, #0]
 8000a74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a78:	6013      	str	r3, [r2, #0]
 8000a7a:	e7f7      	b.n	8000a6c <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000a7c:	6823      	ldr	r3, [r4, #0]
 8000a7e:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8000a82:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000a84:	4632      	mov	r2, r6
 8000a86:	4641      	mov	r1, r8
 8000a88:	4620      	mov	r0, r4
 8000a8a:	f7ff ff7d 	bl	8000988 <I2C_WaitOnTXEFlagUntilTimeout>
 8000a8e:	b920      	cbnz	r0, 8000a9a <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000a90:	6823      	ldr	r3, [r4, #0]
 8000a92:	fa5f f689 	uxtb.w	r6, r9
 8000a96:	611e      	str	r6, [r3, #16]
 8000a98:	e7cd      	b.n	8000a36 <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000a9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a9c:	2b04      	cmp	r3, #4
 8000a9e:	d001      	beq.n	8000aa4 <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	e7c8      	b.n	8000a36 <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000aa4:	6822      	ldr	r2, [r4, #0]
 8000aa6:	6813      	ldr	r3, [r2, #0]
 8000aa8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aac:	6013      	str	r3, [r2, #0]
 8000aae:	e7f7      	b.n	8000aa0 <I2C_RequestMemoryWrite+0xc4>
 8000ab0:	00010002 	.word	0x00010002

08000ab4 <I2C_RequestMemoryRead>:
{
 8000ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab8:	b084      	sub	sp, #16
 8000aba:	4604      	mov	r4, r0
 8000abc:	460d      	mov	r5, r1
 8000abe:	4616      	mov	r6, r2
 8000ac0:	4699      	mov	r9, r3
 8000ac2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8000ac4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000ac8:	6802      	ldr	r2, [r0, #0]
 8000aca:	6813      	ldr	r3, [r2, #0]
 8000acc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ad0:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000ad2:	6803      	ldr	r3, [r0, #0]
 8000ad4:	6819      	ldr	r1, [r3, #0]
 8000ad6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000ada:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000adc:	f8cd 8000 	str.w	r8, [sp]
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000ae8:	f7ff febb 	bl	8000862 <I2C_WaitOnFlagUntilTimeout>
 8000aec:	b970      	cbnz	r0, 8000b0c <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000aee:	fa5f fa85 	uxtb.w	sl, r5
 8000af2:	6823      	ldr	r3, [r4, #0]
 8000af4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000af8:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000afa:	4643      	mov	r3, r8
 8000afc:	463a      	mov	r2, r7
 8000afe:	4941      	ldr	r1, [pc, #260]	; (8000c04 <I2C_RequestMemoryRead+0x150>)
 8000b00:	4620      	mov	r0, r4
 8000b02:	f7ff feec 	bl	80008de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000b06:	b168      	cbz	r0, 8000b24 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 8000b08:	2001      	movs	r0, #1
 8000b0a:	e008      	b.n	8000b1e <I2C_RequestMemoryRead+0x6a>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8000b0c:	6823      	ldr	r3, [r4, #0]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000b14:	d002      	beq.n	8000b1c <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000b16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b1a:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8000b1c:	2003      	movs	r0, #3
}
 8000b1e:	b004      	add	sp, #16
 8000b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b24:	2300      	movs	r3, #0
 8000b26:	9303      	str	r3, [sp, #12]
 8000b28:	6823      	ldr	r3, [r4, #0]
 8000b2a:	695a      	ldr	r2, [r3, #20]
 8000b2c:	9203      	str	r2, [sp, #12]
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	9303      	str	r3, [sp, #12]
 8000b32:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b34:	4642      	mov	r2, r8
 8000b36:	4639      	mov	r1, r7
 8000b38:	4620      	mov	r0, r4
 8000b3a:	f7ff ff25 	bl	8000988 <I2C_WaitOnTXEFlagUntilTimeout>
 8000b3e:	b980      	cbnz	r0, 8000b62 <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000b40:	f1b9 0f01 	cmp.w	r9, #1
 8000b44:	d118      	bne.n	8000b78 <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000b46:	6823      	ldr	r3, [r4, #0]
 8000b48:	b2f6      	uxtb	r6, r6
 8000b4a:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b4c:	4642      	mov	r2, r8
 8000b4e:	4639      	mov	r1, r7
 8000b50:	4620      	mov	r0, r4
 8000b52:	f7ff ff19 	bl	8000988 <I2C_WaitOnTXEFlagUntilTimeout>
 8000b56:	b368      	cbz	r0, 8000bb4 <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b5a:	2b04      	cmp	r3, #4
 8000b5c:	d024      	beq.n	8000ba8 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 8000b5e:	2001      	movs	r0, #1
 8000b60:	e7dd      	b.n	8000b1e <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b64:	2b04      	cmp	r3, #4
 8000b66:	d001      	beq.n	8000b6c <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 8000b68:	2001      	movs	r0, #1
 8000b6a:	e7d8      	b.n	8000b1e <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b6c:	6822      	ldr	r2, [r4, #0]
 8000b6e:	6813      	ldr	r3, [r2, #0]
 8000b70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	e7f7      	b.n	8000b68 <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000b78:	6823      	ldr	r3, [r4, #0]
 8000b7a:	0a32      	lsrs	r2, r6, #8
 8000b7c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b7e:	4642      	mov	r2, r8
 8000b80:	4639      	mov	r1, r7
 8000b82:	4620      	mov	r0, r4
 8000b84:	f7ff ff00 	bl	8000988 <I2C_WaitOnTXEFlagUntilTimeout>
 8000b88:	b918      	cbnz	r0, 8000b92 <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000b8a:	6823      	ldr	r3, [r4, #0]
 8000b8c:	b2f6      	uxtb	r6, r6
 8000b8e:	611e      	str	r6, [r3, #16]
 8000b90:	e7dc      	b.n	8000b4c <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b94:	2b04      	cmp	r3, #4
 8000b96:	d001      	beq.n	8000b9c <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 8000b98:	2001      	movs	r0, #1
 8000b9a:	e7c0      	b.n	8000b1e <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b9c:	6822      	ldr	r2, [r4, #0]
 8000b9e:	6813      	ldr	r3, [r2, #0]
 8000ba0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ba4:	6013      	str	r3, [r2, #0]
 8000ba6:	e7f7      	b.n	8000b98 <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ba8:	6822      	ldr	r2, [r4, #0]
 8000baa:	6813      	ldr	r3, [r2, #0]
 8000bac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bb0:	6013      	str	r3, [r2, #0]
 8000bb2:	e7d4      	b.n	8000b5e <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000bb4:	6822      	ldr	r2, [r4, #0]
 8000bb6:	6813      	ldr	r3, [r2, #0]
 8000bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bbc:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000bbe:	f8cd 8000 	str.w	r8, [sp]
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000bca:	4620      	mov	r0, r4
 8000bcc:	f7ff fe49 	bl	8000862 <I2C_WaitOnFlagUntilTimeout>
 8000bd0:	b968      	cbnz	r0, 8000bee <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000bd2:	6822      	ldr	r2, [r4, #0]
 8000bd4:	f04a 0301 	orr.w	r3, sl, #1
 8000bd8:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000bda:	4643      	mov	r3, r8
 8000bdc:	463a      	mov	r2, r7
 8000bde:	4909      	ldr	r1, [pc, #36]	; (8000c04 <I2C_RequestMemoryRead+0x150>)
 8000be0:	4620      	mov	r0, r4
 8000be2:	f7ff fe7c 	bl	80008de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	d099      	beq.n	8000b1e <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 8000bea:	2001      	movs	r0, #1
 8000bec:	e797      	b.n	8000b1e <I2C_RequestMemoryRead+0x6a>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8000bee:	6823      	ldr	r3, [r4, #0]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000bf6:	d002      	beq.n	8000bfe <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bfc:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8000bfe:	2003      	movs	r0, #3
 8000c00:	e78d      	b.n	8000b1e <I2C_RequestMemoryRead+0x6a>
 8000c02:	bf00      	nop
 8000c04:	00010002 	.word	0x00010002

08000c08 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8000c08:	b570      	push	{r4, r5, r6, lr}
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	460d      	mov	r5, r1
 8000c0e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000c10:	6823      	ldr	r3, [r4, #0]
 8000c12:	695b      	ldr	r3, [r3, #20]
 8000c14:	f013 0f04 	tst.w	r3, #4
 8000c18:	d11c      	bne.n	8000c54 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	f7ff fe08 	bl	8000830 <I2C_IsAcknowledgeFailed>
 8000c20:	b9d0      	cbnz	r0, 8000c58 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000c22:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8000c26:	d0f3      	beq.n	8000c10 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000c28:	f7ff fca2 	bl	8000570 <HAL_GetTick>
 8000c2c:	1b80      	subs	r0, r0, r6
 8000c2e:	42a8      	cmp	r0, r5
 8000c30:	d801      	bhi.n	8000c36 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8000c32:	2d00      	cmp	r5, #0
 8000c34:	d1ec      	bne.n	8000c10 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000c3a:	2220      	movs	r2, #32
 8000c3c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000c40:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000c44:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000c46:	f042 0220 	orr.w	r2, r2, #32
 8000c4a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000c4c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000c50:	2001      	movs	r0, #1
 8000c52:	e000      	b.n	8000c56 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8000c54:	2000      	movs	r0, #0
}
 8000c56:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000c58:	2001      	movs	r0, #1
 8000c5a:	e7fc      	b.n	8000c56 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08000c5c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000c5c:	b570      	push	{r4, r5, r6, lr}
 8000c5e:	4605      	mov	r5, r0
 8000c60:	460c      	mov	r4, r1
 8000c62:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000c64:	682b      	ldr	r3, [r5, #0]
 8000c66:	6959      	ldr	r1, [r3, #20]
 8000c68:	f011 0f40 	tst.w	r1, #64	; 0x40
 8000c6c:	d129      	bne.n	8000cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000c6e:	6959      	ldr	r1, [r3, #20]
 8000c70:	f011 0f10 	tst.w	r1, #16
 8000c74:	d115      	bne.n	8000ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000c76:	f7ff fc7b 	bl	8000570 <HAL_GetTick>
 8000c7a:	1b80      	subs	r0, r0, r6
 8000c7c:	42a0      	cmp	r0, r4
 8000c7e:	d801      	bhi.n	8000c84 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8000c80:	2c00      	cmp	r4, #0
 8000c82:	d1ef      	bne.n	8000c64 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000c88:	2220      	movs	r2, #32
 8000c8a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000c8e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000c92:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000c94:	f042 0220 	orr.w	r2, r2, #32
 8000c98:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000c9a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8000c9e:	2001      	movs	r0, #1
}
 8000ca0:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000ca2:	f06f 0210 	mvn.w	r2, #16
 8000ca6:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000cac:	2220      	movs	r2, #32
 8000cae:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000cb2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8000cb6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000cb8:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000cba:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	e7ee      	b.n	8000ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	e7ec      	b.n	8000ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08000cc8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8000cc8:	2800      	cmp	r0, #0
 8000cca:	f000 80cc 	beq.w	8000e66 <HAL_I2C_Init+0x19e>
{
 8000cce:	b570      	push	{r4, r5, r6, lr}
 8000cd0:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000cd2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d077      	beq.n	8000dca <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cda:	2324      	movs	r3, #36	; 0x24
 8000cdc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000ce0:	6822      	ldr	r2, [r4, #0]
 8000ce2:	6813      	ldr	r3, [r2, #0]
 8000ce4:	f023 0301 	bic.w	r3, r3, #1
 8000ce8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000cea:	6822      	ldr	r2, [r4, #0]
 8000cec:	6813      	ldr	r3, [r2, #0]
 8000cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cf2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000cf4:	6822      	ldr	r2, [r4, #0]
 8000cf6:	6813      	ldr	r3, [r2, #0]
 8000cf8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000cfc:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000cfe:	f000 fde3 	bl	80018c8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000d02:	6862      	ldr	r2, [r4, #4]
 8000d04:	4b5a      	ldr	r3, [pc, #360]	; (8000e70 <HAL_I2C_Init+0x1a8>)
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d864      	bhi.n	8000dd4 <HAL_I2C_Init+0x10c>
 8000d0a:	4b5a      	ldr	r3, [pc, #360]	; (8000e74 <HAL_I2C_Init+0x1ac>)
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	bf8c      	ite	hi
 8000d10:	2300      	movhi	r3, #0
 8000d12:	2301      	movls	r3, #1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	f040 80a8 	bne.w	8000e6a <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8000d1a:	4957      	ldr	r1, [pc, #348]	; (8000e78 <HAL_I2C_Init+0x1b0>)
 8000d1c:	fba1 3100 	umull	r3, r1, r1, r0
 8000d20:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d22:	6825      	ldr	r5, [r4, #0]
 8000d24:	686a      	ldr	r2, [r5, #4]
 8000d26:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8000d2a:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8000d2e:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d30:	6821      	ldr	r1, [r4, #0]
 8000d32:	6a0a      	ldr	r2, [r1, #32]
 8000d34:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8000d38:	6866      	ldr	r6, [r4, #4]
 8000d3a:	4d4d      	ldr	r5, [pc, #308]	; (8000e70 <HAL_I2C_Init+0x1a8>)
 8000d3c:	42ae      	cmp	r6, r5
 8000d3e:	d84f      	bhi.n	8000de0 <HAL_I2C_Init+0x118>
 8000d40:	3301      	adds	r3, #1
 8000d42:	4313      	orrs	r3, r2
 8000d44:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d46:	6821      	ldr	r1, [r4, #0]
 8000d48:	69ca      	ldr	r2, [r1, #28]
 8000d4a:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 8000d4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000d52:	6866      	ldr	r6, [r4, #4]
 8000d54:	4b46      	ldr	r3, [pc, #280]	; (8000e70 <HAL_I2C_Init+0x1a8>)
 8000d56:	429e      	cmp	r6, r3
 8000d58:	d84c      	bhi.n	8000df4 <HAL_I2C_Init+0x12c>
 8000d5a:	1e43      	subs	r3, r0, #1
 8000d5c:	0076      	lsls	r6, r6, #1
 8000d5e:	fbb3 f3f6 	udiv	r3, r3, r6
 8000d62:	3301      	adds	r3, #1
 8000d64:	f640 70fc 	movw	r0, #4092	; 0xffc
 8000d68:	4203      	tst	r3, r0
 8000d6a:	d078      	beq.n	8000e5e <HAL_I2C_Init+0x196>
 8000d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d70:	4313      	orrs	r3, r2
 8000d72:	61cb      	str	r3, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000d74:	6821      	ldr	r1, [r4, #0]
 8000d76:	680b      	ldr	r3, [r1, #0]
 8000d78:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000d7c:	69e2      	ldr	r2, [r4, #28]
 8000d7e:	6a20      	ldr	r0, [r4, #32]
 8000d80:	4302      	orrs	r2, r0
 8000d82:	4313      	orrs	r3, r2
 8000d84:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000d86:	6821      	ldr	r1, [r4, #0]
 8000d88:	688b      	ldr	r3, [r1, #8]
 8000d8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000d8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000d92:	6922      	ldr	r2, [r4, #16]
 8000d94:	68e0      	ldr	r0, [r4, #12]
 8000d96:	4302      	orrs	r2, r0
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000d9c:	6821      	ldr	r1, [r4, #0]
 8000d9e:	68cb      	ldr	r3, [r1, #12]
 8000da0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000da4:	6962      	ldr	r2, [r4, #20]
 8000da6:	69a0      	ldr	r0, [r4, #24]
 8000da8:	4302      	orrs	r2, r0
 8000daa:	4313      	orrs	r3, r2
 8000dac:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000dae:	6822      	ldr	r2, [r4, #0]
 8000db0:	6813      	ldr	r3, [r2, #0]
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000db8:	2000      	movs	r0, #0
 8000dba:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000dbc:	2320      	movs	r3, #32
 8000dbe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000dc2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dc4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8000dc8:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8000dca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000dce:	f001 fa25 	bl	800221c <HAL_I2C_MspInit>
 8000dd2:	e782      	b.n	8000cda <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000dd4:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <HAL_I2C_Init+0x1b4>)
 8000dd6:	4298      	cmp	r0, r3
 8000dd8:	bf8c      	ite	hi
 8000dda:	2300      	movhi	r3, #0
 8000ddc:	2301      	movls	r3, #1
 8000dde:	e799      	b.n	8000d14 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000de0:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8000de4:	fb05 f303 	mul.w	r3, r5, r3
 8000de8:	4d25      	ldr	r5, [pc, #148]	; (8000e80 <HAL_I2C_Init+0x1b8>)
 8000dea:	fba5 5303 	umull	r5, r3, r5, r3
 8000dee:	099b      	lsrs	r3, r3, #6
 8000df0:	3301      	adds	r3, #1
 8000df2:	e7a6      	b.n	8000d42 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000df4:	68a3      	ldr	r3, [r4, #8]
 8000df6:	b9bb      	cbnz	r3, 8000e28 <HAL_I2C_Init+0x160>
 8000df8:	1e45      	subs	r5, r0, #1
 8000dfa:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8000dfe:	fbb5 f5fc 	udiv	r5, r5, ip
 8000e02:	3501      	adds	r5, #1
 8000e04:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8000e08:	fab5 f585 	clz	r5, r5
 8000e0c:	096d      	lsrs	r5, r5, #5
 8000e0e:	bb45      	cbnz	r5, 8000e62 <HAL_I2C_Init+0x19a>
 8000e10:	b9c3      	cbnz	r3, 8000e44 <HAL_I2C_Init+0x17c>
 8000e12:	3801      	subs	r0, #1
 8000e14:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000e18:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e26:	e7a3      	b.n	8000d70 <HAL_I2C_Init+0xa8>
 8000e28:	1e45      	subs	r5, r0, #1
 8000e2a:	eb06 0c86 	add.w	ip, r6, r6, lsl #2
 8000e2e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8000e32:	fbb5 f5fc 	udiv	r5, r5, ip
 8000e36:	3501      	adds	r5, #1
 8000e38:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8000e3c:	fab5 f585 	clz	r5, r5
 8000e40:	096d      	lsrs	r5, r5, #5
 8000e42:	e7e4      	b.n	8000e0e <HAL_I2C_Init+0x146>
 8000e44:	3801      	subs	r0, #1
 8000e46:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8000e4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e52:	3301      	adds	r3, #1
 8000e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e5c:	e788      	b.n	8000d70 <HAL_I2C_Init+0xa8>
 8000e5e:	2304      	movs	r3, #4
 8000e60:	e786      	b.n	8000d70 <HAL_I2C_Init+0xa8>
 8000e62:	2301      	movs	r3, #1
 8000e64:	e784      	b.n	8000d70 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8000e66:	2001      	movs	r0, #1
}
 8000e68:	4770      	bx	lr
    return HAL_ERROR;
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	e7ac      	b.n	8000dc8 <HAL_I2C_Init+0x100>
 8000e6e:	bf00      	nop
 8000e70:	000186a0 	.word	0x000186a0
 8000e74:	001e847f 	.word	0x001e847f
 8000e78:	431bde83 	.word	0x431bde83
 8000e7c:	003d08ff 	.word	0x003d08ff
 8000e80:	10624dd3 	.word	0x10624dd3

08000e84 <HAL_I2C_Mem_Write>:
{
 8000e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	4604      	mov	r4, r0
 8000e8c:	460f      	mov	r7, r1
 8000e8e:	4690      	mov	r8, r2
 8000e90:	4699      	mov	r9, r3
 8000e92:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8000e94:	f7ff fb6c 	bl	8000570 <HAL_GetTick>
 8000e98:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e9a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8000e9e:	b2c0      	uxtb	r0, r0
 8000ea0:	2820      	cmp	r0, #32
 8000ea2:	d003      	beq.n	8000eac <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8000ea4:	2002      	movs	r0, #2
}
 8000ea6:	b003      	add	sp, #12
 8000ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000eac:	9500      	str	r5, [sp, #0]
 8000eae:	2319      	movs	r3, #25
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	494b      	ldr	r1, [pc, #300]	; (8000fe0 <HAL_I2C_Mem_Write+0x15c>)
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	f7ff fcd4 	bl	8000862 <I2C_WaitOnFlagUntilTimeout>
 8000eba:	2800      	cmp	r0, #0
 8000ebc:	f040 8089 	bne.w	8000fd2 <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8000ec0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	f000 8086 	beq.w	8000fd6 <HAL_I2C_Mem_Write+0x152>
 8000eca:	2301      	movs	r3, #1
 8000ecc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000ed0:	6823      	ldr	r3, [r4, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	f012 0f01 	tst.w	r2, #1
 8000ed8:	d103      	bne.n	8000ee2 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	f042 0201 	orr.w	r2, r2, #1
 8000ee0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000ee2:	6822      	ldr	r2, [r4, #0]
 8000ee4:	6813      	ldr	r3, [r2, #0]
 8000ee6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000eea:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000eec:	2321      	movs	r3, #33	; 0x21
 8000eee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000ef2:	2340      	movs	r3, #64	; 0x40
 8000ef4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8000efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000efe:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000f00:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8000f04:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000f06:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f08:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f0a:	4b36      	ldr	r3, [pc, #216]	; (8000fe4 <HAL_I2C_Mem_Write+0x160>)
 8000f0c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000f0e:	9501      	str	r5, [sp, #4]
 8000f10:	9600      	str	r6, [sp, #0]
 8000f12:	464b      	mov	r3, r9
 8000f14:	4642      	mov	r2, r8
 8000f16:	4639      	mov	r1, r7
 8000f18:	4620      	mov	r0, r4
 8000f1a:	f7ff fd5f 	bl	80009dc <I2C_RequestMemoryWrite>
 8000f1e:	2800      	cmp	r0, #0
 8000f20:	d15b      	bne.n	8000fda <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 8000f22:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d035      	beq.n	8000f94 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f28:	462a      	mov	r2, r5
 8000f2a:	4631      	mov	r1, r6
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	f7ff fd2b 	bl	8000988 <I2C_WaitOnTXEFlagUntilTimeout>
 8000f32:	bb20      	cbnz	r0, 8000f7e <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f34:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f36:	6823      	ldr	r3, [r4, #0]
 8000f38:	7812      	ldrb	r2, [r2, #0]
 8000f3a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8000f3c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f3e:	1c53      	adds	r3, r2, #1
 8000f40:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8000f42:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8000f44:	3901      	subs	r1, #1
 8000f46:	b289      	uxth	r1, r1
 8000f48:	8521      	strh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000f4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000f54:	6823      	ldr	r3, [r4, #0]
 8000f56:	6958      	ldr	r0, [r3, #20]
 8000f58:	f010 0f04 	tst.w	r0, #4
 8000f5c:	d0e1      	beq.n	8000f22 <HAL_I2C_Mem_Write+0x9e>
 8000f5e:	2900      	cmp	r1, #0
 8000f60:	d0df      	beq.n	8000f22 <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f62:	7852      	ldrb	r2, [r2, #1]
 8000f64:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8000f66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f68:	3301      	adds	r3, #1
 8000f6a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8000f6c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8000f72:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	3b01      	subs	r3, #1
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	8563      	strh	r3, [r4, #42]	; 0x2a
 8000f7c:	e7d1      	b.n	8000f22 <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	d001      	beq.n	8000f88 <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8000f84:	2001      	movs	r0, #1
 8000f86:	e78e      	b.n	8000ea6 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f88:	6822      	ldr	r2, [r4, #0]
 8000f8a:	6813      	ldr	r3, [r2, #0]
 8000f8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	e7f7      	b.n	8000f84 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f94:	462a      	mov	r2, r5
 8000f96:	4631      	mov	r1, r6
 8000f98:	4620      	mov	r0, r4
 8000f9a:	f7ff fe35 	bl	8000c08 <I2C_WaitOnBTFFlagUntilTimeout>
 8000f9e:	b150      	cbz	r0, 8000fb6 <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fa0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	d001      	beq.n	8000faa <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	e77d      	b.n	8000ea6 <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000faa:	6822      	ldr	r2, [r4, #0]
 8000fac:	6813      	ldr	r3, [r2, #0]
 8000fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	e7f7      	b.n	8000fa6 <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000fb6:	6822      	ldr	r2, [r4, #0]
 8000fb8:	6813      	ldr	r3, [r2, #0]
 8000fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fbe:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000fc0:	2320      	movs	r3, #32
 8000fc2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8000fcc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8000fd0:	e769      	b.n	8000ea6 <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8000fd2:	2002      	movs	r0, #2
 8000fd4:	e767      	b.n	8000ea6 <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8000fd6:	2002      	movs	r0, #2
 8000fd8:	e765      	b.n	8000ea6 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8000fda:	2001      	movs	r0, #1
 8000fdc:	e763      	b.n	8000ea6 <HAL_I2C_Mem_Write+0x22>
 8000fde:	bf00      	nop
 8000fe0:	00100002 	.word	0x00100002
 8000fe4:	ffff0000 	.word	0xffff0000

08000fe8 <HAL_I2C_Mem_Read>:
{
 8000fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fec:	b087      	sub	sp, #28
 8000fee:	4604      	mov	r4, r0
 8000ff0:	460f      	mov	r7, r1
 8000ff2:	4690      	mov	r8, r2
 8000ff4:	4699      	mov	r9, r3
 8000ff6:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8000ff8:	f7ff faba 	bl	8000570 <HAL_GetTick>
 8000ffc:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ffe:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8001002:	b2c0      	uxtb	r0, r0
 8001004:	2820      	cmp	r0, #32
 8001006:	d004      	beq.n	8001012 <HAL_I2C_Mem_Read+0x2a>
    return HAL_BUSY;
 8001008:	2702      	movs	r7, #2
}
 800100a:	4638      	mov	r0, r7
 800100c:	b007      	add	sp, #28
 800100e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001012:	9500      	str	r5, [sp, #0]
 8001014:	2319      	movs	r3, #25
 8001016:	2201      	movs	r2, #1
 8001018:	4988      	ldr	r1, [pc, #544]	; (800123c <HAL_I2C_Mem_Read+0x254>)
 800101a:	4620      	mov	r0, r4
 800101c:	f7ff fc21 	bl	8000862 <I2C_WaitOnFlagUntilTimeout>
 8001020:	2800      	cmp	r0, #0
 8001022:	f040 8143 	bne.w	80012ac <HAL_I2C_Mem_Read+0x2c4>
    __HAL_LOCK(hi2c);
 8001026:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800102a:	2b01      	cmp	r3, #1
 800102c:	f000 8140 	beq.w	80012b0 <HAL_I2C_Mem_Read+0x2c8>
 8001030:	2301      	movs	r3, #1
 8001032:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001036:	6823      	ldr	r3, [r4, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	f012 0f01 	tst.w	r2, #1
 800103e:	d103      	bne.n	8001048 <HAL_I2C_Mem_Read+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	f042 0201 	orr.w	r2, r2, #1
 8001046:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001048:	6822      	ldr	r2, [r4, #0]
 800104a:	6813      	ldr	r3, [r2, #0]
 800104c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001050:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001052:	2322      	movs	r3, #34	; 0x22
 8001054:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001058:	2340      	movs	r3, #64	; 0x40
 800105a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800105e:	2300      	movs	r3, #0
 8001060:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001062:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001064:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001066:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800106a:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800106c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800106e:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001070:	4b73      	ldr	r3, [pc, #460]	; (8001240 <HAL_I2C_Mem_Read+0x258>)
 8001072:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001074:	9501      	str	r5, [sp, #4]
 8001076:	9600      	str	r6, [sp, #0]
 8001078:	464b      	mov	r3, r9
 800107a:	4642      	mov	r2, r8
 800107c:	4639      	mov	r1, r7
 800107e:	4620      	mov	r0, r4
 8001080:	f7ff fd18 	bl	8000ab4 <I2C_RequestMemoryRead>
 8001084:	4607      	mov	r7, r0
 8001086:	2800      	cmp	r0, #0
 8001088:	f040 8114 	bne.w	80012b4 <HAL_I2C_Mem_Read+0x2cc>
    if (hi2c->XferSize == 0U)
 800108c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800108e:	b95b      	cbnz	r3, 80010a8 <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001090:	9302      	str	r3, [sp, #8]
 8001092:	6823      	ldr	r3, [r4, #0]
 8001094:	695a      	ldr	r2, [r3, #20]
 8001096:	9202      	str	r2, [sp, #8]
 8001098:	699a      	ldr	r2, [r3, #24]
 800109a:	9202      	str	r2, [sp, #8]
 800109c:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	e075      	b.n	8001194 <HAL_I2C_Mem_Read+0x1ac>
    else if (hi2c->XferSize == 1U)
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d00a      	beq.n	80010c2 <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d01a      	beq.n	80010e6 <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010b0:	2300      	movs	r3, #0
 80010b2:	9305      	str	r3, [sp, #20]
 80010b4:	6823      	ldr	r3, [r4, #0]
 80010b6:	695a      	ldr	r2, [r3, #20]
 80010b8:	9205      	str	r2, [sp, #20]
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	9305      	str	r3, [sp, #20]
 80010be:	9b05      	ldr	r3, [sp, #20]
 80010c0:	e068      	b.n	8001194 <HAL_I2C_Mem_Read+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010c2:	6822      	ldr	r2, [r4, #0]
 80010c4:	6813      	ldr	r3, [r2, #0]
 80010c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010ca:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010cc:	2300      	movs	r3, #0
 80010ce:	9303      	str	r3, [sp, #12]
 80010d0:	6823      	ldr	r3, [r4, #0]
 80010d2:	695a      	ldr	r2, [r3, #20]
 80010d4:	9203      	str	r2, [sp, #12]
 80010d6:	699a      	ldr	r2, [r3, #24]
 80010d8:	9203      	str	r2, [sp, #12]
 80010da:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	e056      	b.n	8001194 <HAL_I2C_Mem_Read+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010e6:	6822      	ldr	r2, [r4, #0]
 80010e8:	6813      	ldr	r3, [r2, #0]
 80010ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010ee:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010f0:	6822      	ldr	r2, [r4, #0]
 80010f2:	6813      	ldr	r3, [r2, #0]
 80010f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010f8:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010fa:	2300      	movs	r3, #0
 80010fc:	9304      	str	r3, [sp, #16]
 80010fe:	6823      	ldr	r3, [r4, #0]
 8001100:	695a      	ldr	r2, [r3, #20]
 8001102:	9204      	str	r2, [sp, #16]
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	9304      	str	r3, [sp, #16]
 8001108:	9b04      	ldr	r3, [sp, #16]
 800110a:	e043      	b.n	8001194 <HAL_I2C_Mem_Read+0x1ac>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800110c:	462a      	mov	r2, r5
 800110e:	4631      	mov	r1, r6
 8001110:	4620      	mov	r0, r4
 8001112:	f7ff fda3 	bl	8000c5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001116:	2800      	cmp	r0, #0
 8001118:	f040 80ce 	bne.w	80012b8 <HAL_I2C_Mem_Read+0x2d0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800111c:	6823      	ldr	r3, [r4, #0]
 800111e:	691a      	ldr	r2, [r3, #16]
 8001120:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001122:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001124:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001126:	3301      	adds	r3, #1
 8001128:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800112a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800112c:	3b01      	subs	r3, #1
 800112e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001130:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001132:	b29b      	uxth	r3, r3
 8001134:	3b01      	subs	r3, #1
 8001136:	b29b      	uxth	r3, r3
 8001138:	8563      	strh	r3, [r4, #42]	; 0x2a
 800113a:	e02b      	b.n	8001194 <HAL_I2C_Mem_Read+0x1ac>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800113c:	9500      	str	r5, [sp, #0]
 800113e:	4633      	mov	r3, r6
 8001140:	2200      	movs	r2, #0
 8001142:	4940      	ldr	r1, [pc, #256]	; (8001244 <HAL_I2C_Mem_Read+0x25c>)
 8001144:	4620      	mov	r0, r4
 8001146:	f7ff fb8c 	bl	8000862 <I2C_WaitOnFlagUntilTimeout>
 800114a:	2800      	cmp	r0, #0
 800114c:	f040 80b6 	bne.w	80012bc <HAL_I2C_Mem_Read+0x2d4>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001150:	6822      	ldr	r2, [r4, #0]
 8001152:	6813      	ldr	r3, [r2, #0]
 8001154:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001158:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800115a:	6823      	ldr	r3, [r4, #0]
 800115c:	691a      	ldr	r2, [r3, #16]
 800115e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001160:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001162:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001164:	1c53      	adds	r3, r2, #1
 8001166:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001168:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800116a:	3b01      	subs	r3, #1
 800116c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800116e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001170:	b29b      	uxth	r3, r3
 8001172:	3b01      	subs	r3, #1
 8001174:	b29b      	uxth	r3, r3
 8001176:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001178:	6823      	ldr	r3, [r4, #0]
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800117e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001180:	3301      	adds	r3, #1
 8001182:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001184:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001186:	3b01      	subs	r3, #1
 8001188:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800118a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800118c:	b29b      	uxth	r3, r3
 800118e:	3b01      	subs	r3, #1
 8001190:	b29b      	uxth	r3, r3
 8001192:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001194:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001196:	2b00      	cmp	r3, #0
 8001198:	d07f      	beq.n	800129a <HAL_I2C_Mem_Read+0x2b2>
      if (hi2c->XferSize <= 3U)
 800119a:	2b03      	cmp	r3, #3
 800119c:	d854      	bhi.n	8001248 <HAL_I2C_Mem_Read+0x260>
        if (hi2c->XferSize == 1U)
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d0b4      	beq.n	800110c <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d0ca      	beq.n	800113c <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80011a6:	9500      	str	r5, [sp, #0]
 80011a8:	4633      	mov	r3, r6
 80011aa:	2200      	movs	r2, #0
 80011ac:	4925      	ldr	r1, [pc, #148]	; (8001244 <HAL_I2C_Mem_Read+0x25c>)
 80011ae:	4620      	mov	r0, r4
 80011b0:	f7ff fb57 	bl	8000862 <I2C_WaitOnFlagUntilTimeout>
 80011b4:	2800      	cmp	r0, #0
 80011b6:	f040 8083 	bne.w	80012c0 <HAL_I2C_Mem_Read+0x2d8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80011ba:	6822      	ldr	r2, [r4, #0]
 80011bc:	6813      	ldr	r3, [r2, #0]
 80011be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80011c2:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80011c4:	6823      	ldr	r3, [r4, #0]
 80011c6:	691a      	ldr	r2, [r3, #16]
 80011c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011ca:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80011cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011ce:	3301      	adds	r3, #1
 80011d0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80011d2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80011d4:	3b01      	subs	r3, #1
 80011d6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80011d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80011da:	b29b      	uxth	r3, r3
 80011dc:	3b01      	subs	r3, #1
 80011de:	b29b      	uxth	r3, r3
 80011e0:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80011e2:	9500      	str	r5, [sp, #0]
 80011e4:	4633      	mov	r3, r6
 80011e6:	2200      	movs	r2, #0
 80011e8:	4916      	ldr	r1, [pc, #88]	; (8001244 <HAL_I2C_Mem_Read+0x25c>)
 80011ea:	4620      	mov	r0, r4
 80011ec:	f7ff fb39 	bl	8000862 <I2C_WaitOnFlagUntilTimeout>
 80011f0:	2800      	cmp	r0, #0
 80011f2:	d167      	bne.n	80012c4 <HAL_I2C_Mem_Read+0x2dc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011f4:	6822      	ldr	r2, [r4, #0]
 80011f6:	6813      	ldr	r3, [r2, #0]
 80011f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011fc:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80011fe:	6823      	ldr	r3, [r4, #0]
 8001200:	691a      	ldr	r2, [r3, #16]
 8001202:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001204:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001206:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001208:	1c53      	adds	r3, r2, #1
 800120a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800120c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800120e:	3b01      	subs	r3, #1
 8001210:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001212:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001214:	b29b      	uxth	r3, r3
 8001216:	3b01      	subs	r3, #1
 8001218:	b29b      	uxth	r3, r3
 800121a:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800121c:	6823      	ldr	r3, [r4, #0]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8001222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001224:	3301      	adds	r3, #1
 8001226:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001228:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800122a:	3b01      	subs	r3, #1
 800122c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800122e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001230:	b29b      	uxth	r3, r3
 8001232:	3b01      	subs	r3, #1
 8001234:	b29b      	uxth	r3, r3
 8001236:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001238:	e7ac      	b.n	8001194 <HAL_I2C_Mem_Read+0x1ac>
 800123a:	bf00      	nop
 800123c:	00100002 	.word	0x00100002
 8001240:	ffff0000 	.word	0xffff0000
 8001244:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001248:	462a      	mov	r2, r5
 800124a:	4631      	mov	r1, r6
 800124c:	4620      	mov	r0, r4
 800124e:	f7ff fd05 	bl	8000c5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001252:	2800      	cmp	r0, #0
 8001254:	d138      	bne.n	80012c8 <HAL_I2C_Mem_Read+0x2e0>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001256:	6823      	ldr	r3, [r4, #0]
 8001258:	691a      	ldr	r2, [r3, #16]
 800125a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800125c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800125e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001260:	1c53      	adds	r3, r2, #1
 8001262:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8001264:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001266:	3b01      	subs	r3, #1
 8001268:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800126a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800126c:	b29b      	uxth	r3, r3
 800126e:	3b01      	subs	r3, #1
 8001270:	b29b      	uxth	r3, r3
 8001272:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001274:	6823      	ldr	r3, [r4, #0]
 8001276:	6959      	ldr	r1, [r3, #20]
 8001278:	f011 0f04 	tst.w	r1, #4
 800127c:	d08a      	beq.n	8001194 <HAL_I2C_Mem_Read+0x1ac>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8001282:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001284:	3301      	adds	r3, #1
 8001286:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001288:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800128a:	3b01      	subs	r3, #1
 800128c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800128e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001290:	b29b      	uxth	r3, r3
 8001292:	3b01      	subs	r3, #1
 8001294:	b29b      	uxth	r3, r3
 8001296:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001298:	e77c      	b.n	8001194 <HAL_I2C_Mem_Read+0x1ac>
    hi2c->State = HAL_I2C_STATE_READY;
 800129a:	2320      	movs	r3, #32
 800129c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80012a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80012aa:	e6ae      	b.n	800100a <HAL_I2C_Mem_Read+0x22>
      return HAL_BUSY;
 80012ac:	2702      	movs	r7, #2
 80012ae:	e6ac      	b.n	800100a <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 80012b0:	2702      	movs	r7, #2
 80012b2:	e6aa      	b.n	800100a <HAL_I2C_Mem_Read+0x22>
      return HAL_ERROR;
 80012b4:	2701      	movs	r7, #1
 80012b6:	e6a8      	b.n	800100a <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 80012b8:	2701      	movs	r7, #1
 80012ba:	e6a6      	b.n	800100a <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 80012bc:	2701      	movs	r7, #1
 80012be:	e6a4      	b.n	800100a <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 80012c0:	2701      	movs	r7, #1
 80012c2:	e6a2      	b.n	800100a <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 80012c4:	2701      	movs	r7, #1
 80012c6:	e6a0      	b.n	800100a <HAL_I2C_Mem_Read+0x22>
          return HAL_ERROR;
 80012c8:	2701      	movs	r7, #1
 80012ca:	e69e      	b.n	800100a <HAL_I2C_Mem_Read+0x22>

080012cc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012cc:	2800      	cmp	r0, #0
 80012ce:	f000 81da 	beq.w	8001686 <HAL_RCC_OscConfig+0x3ba>
{
 80012d2:	b570      	push	{r4, r5, r6, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d8:	6803      	ldr	r3, [r0, #0]
 80012da:	f013 0f01 	tst.w	r3, #1
 80012de:	d03b      	beq.n	8001358 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012e0:	4b9f      	ldr	r3, [pc, #636]	; (8001560 <HAL_RCC_OscConfig+0x294>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 030c 	and.w	r3, r3, #12
 80012e8:	2b04      	cmp	r3, #4
 80012ea:	d02c      	beq.n	8001346 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ec:	4b9c      	ldr	r3, [pc, #624]	; (8001560 <HAL_RCC_OscConfig+0x294>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012f4:	2b08      	cmp	r3, #8
 80012f6:	d021      	beq.n	800133c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f8:	6863      	ldr	r3, [r4, #4]
 80012fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012fe:	d04f      	beq.n	80013a0 <HAL_RCC_OscConfig+0xd4>
 8001300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001304:	d052      	beq.n	80013ac <HAL_RCC_OscConfig+0xe0>
 8001306:	4b96      	ldr	r3, [pc, #600]	; (8001560 <HAL_RCC_OscConfig+0x294>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001316:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001318:	6863      	ldr	r3, [r4, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d050      	beq.n	80013c0 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131e:	f7ff f927 	bl	8000570 <HAL_GetTick>
 8001322:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001324:	4b8e      	ldr	r3, [pc, #568]	; (8001560 <HAL_RCC_OscConfig+0x294>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800132c:	d114      	bne.n	8001358 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800132e:	f7ff f91f 	bl	8000570 <HAL_GetTick>
 8001332:	1b40      	subs	r0, r0, r5
 8001334:	2864      	cmp	r0, #100	; 0x64
 8001336:	d9f5      	bls.n	8001324 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001338:	2003      	movs	r0, #3
 800133a:	e1ab      	b.n	8001694 <HAL_RCC_OscConfig+0x3c8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800133c:	4b88      	ldr	r3, [pc, #544]	; (8001560 <HAL_RCC_OscConfig+0x294>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001344:	d0d8      	beq.n	80012f8 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001346:	4b86      	ldr	r3, [pc, #536]	; (8001560 <HAL_RCC_OscConfig+0x294>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800134e:	d003      	beq.n	8001358 <HAL_RCC_OscConfig+0x8c>
 8001350:	6863      	ldr	r3, [r4, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 8199 	beq.w	800168a <HAL_RCC_OscConfig+0x3be>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001358:	6823      	ldr	r3, [r4, #0]
 800135a:	f013 0f02 	tst.w	r3, #2
 800135e:	d054      	beq.n	800140a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001360:	4b7f      	ldr	r3, [pc, #508]	; (8001560 <HAL_RCC_OscConfig+0x294>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f013 0f0c 	tst.w	r3, #12
 8001368:	d03e      	beq.n	80013e8 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800136a:	4b7d      	ldr	r3, [pc, #500]	; (8001560 <HAL_RCC_OscConfig+0x294>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001372:	2b08      	cmp	r3, #8
 8001374:	d033      	beq.n	80013de <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001376:	68e3      	ldr	r3, [r4, #12]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d068      	beq.n	800144e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800137c:	4b79      	ldr	r3, [pc, #484]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 800137e:	2201      	movs	r2, #1
 8001380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001382:	f7ff f8f5 	bl	8000570 <HAL_GetTick>
 8001386:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001388:	4b75      	ldr	r3, [pc, #468]	; (8001560 <HAL_RCC_OscConfig+0x294>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f013 0f02 	tst.w	r3, #2
 8001390:	d154      	bne.n	800143c <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001392:	f7ff f8ed 	bl	8000570 <HAL_GetTick>
 8001396:	1b40      	subs	r0, r0, r5
 8001398:	2802      	cmp	r0, #2
 800139a:	d9f5      	bls.n	8001388 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800139c:	2003      	movs	r0, #3
 800139e:	e179      	b.n	8001694 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a0:	4a6f      	ldr	r2, [pc, #444]	; (8001560 <HAL_RCC_OscConfig+0x294>)
 80013a2:	6813      	ldr	r3, [r2, #0]
 80013a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	e7b5      	b.n	8001318 <HAL_RCC_OscConfig+0x4c>
 80013ac:	4b6c      	ldr	r3, [pc, #432]	; (8001560 <HAL_RCC_OscConfig+0x294>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	e7ab      	b.n	8001318 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80013c0:	f7ff f8d6 	bl	8000570 <HAL_GetTick>
 80013c4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c6:	4b66      	ldr	r3, [pc, #408]	; (8001560 <HAL_RCC_OscConfig+0x294>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80013ce:	d0c3      	beq.n	8001358 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d0:	f7ff f8ce 	bl	8000570 <HAL_GetTick>
 80013d4:	1b40      	subs	r0, r0, r5
 80013d6:	2864      	cmp	r0, #100	; 0x64
 80013d8:	d9f5      	bls.n	80013c6 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80013da:	2003      	movs	r0, #3
 80013dc:	e15a      	b.n	8001694 <HAL_RCC_OscConfig+0x3c8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013de:	4b60      	ldr	r3, [pc, #384]	; (8001560 <HAL_RCC_OscConfig+0x294>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80013e6:	d1c6      	bne.n	8001376 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e8:	4b5d      	ldr	r3, [pc, #372]	; (8001560 <HAL_RCC_OscConfig+0x294>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f013 0f02 	tst.w	r3, #2
 80013f0:	d003      	beq.n	80013fa <HAL_RCC_OscConfig+0x12e>
 80013f2:	68e3      	ldr	r3, [r4, #12]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	f040 814a 	bne.w	800168e <HAL_RCC_OscConfig+0x3c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fa:	4a59      	ldr	r2, [pc, #356]	; (8001560 <HAL_RCC_OscConfig+0x294>)
 80013fc:	6813      	ldr	r3, [r2, #0]
 80013fe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001402:	6921      	ldr	r1, [r4, #16]
 8001404:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001408:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800140a:	6823      	ldr	r3, [r4, #0]
 800140c:	f013 0f08 	tst.w	r3, #8
 8001410:	d042      	beq.n	8001498 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001412:	6963      	ldr	r3, [r4, #20]
 8001414:	b36b      	cbz	r3, 8001472 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001416:	4b53      	ldr	r3, [pc, #332]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 8001418:	2201      	movs	r2, #1
 800141a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800141e:	f7ff f8a7 	bl	8000570 <HAL_GetTick>
 8001422:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001424:	4b4e      	ldr	r3, [pc, #312]	; (8001560 <HAL_RCC_OscConfig+0x294>)
 8001426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001428:	f013 0f02 	tst.w	r3, #2
 800142c:	d134      	bne.n	8001498 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800142e:	f7ff f89f 	bl	8000570 <HAL_GetTick>
 8001432:	1b40      	subs	r0, r0, r5
 8001434:	2802      	cmp	r0, #2
 8001436:	d9f5      	bls.n	8001424 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001438:	2003      	movs	r0, #3
 800143a:	e12b      	b.n	8001694 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143c:	4a48      	ldr	r2, [pc, #288]	; (8001560 <HAL_RCC_OscConfig+0x294>)
 800143e:	6813      	ldr	r3, [r2, #0]
 8001440:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001444:	6921      	ldr	r1, [r4, #16]
 8001446:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	e7dd      	b.n	800140a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800144e:	4b45      	ldr	r3, [pc, #276]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001454:	f7ff f88c 	bl	8000570 <HAL_GetTick>
 8001458:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145a:	4b41      	ldr	r3, [pc, #260]	; (8001560 <HAL_RCC_OscConfig+0x294>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f013 0f02 	tst.w	r3, #2
 8001462:	d0d2      	beq.n	800140a <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001464:	f7ff f884 	bl	8000570 <HAL_GetTick>
 8001468:	1b40      	subs	r0, r0, r5
 800146a:	2802      	cmp	r0, #2
 800146c:	d9f5      	bls.n	800145a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800146e:	2003      	movs	r0, #3
 8001470:	e110      	b.n	8001694 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001472:	4b3c      	ldr	r3, [pc, #240]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 8001474:	2200      	movs	r2, #0
 8001476:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147a:	f7ff f879 	bl	8000570 <HAL_GetTick>
 800147e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001480:	4b37      	ldr	r3, [pc, #220]	; (8001560 <HAL_RCC_OscConfig+0x294>)
 8001482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001484:	f013 0f02 	tst.w	r3, #2
 8001488:	d006      	beq.n	8001498 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800148a:	f7ff f871 	bl	8000570 <HAL_GetTick>
 800148e:	1b40      	subs	r0, r0, r5
 8001490:	2802      	cmp	r0, #2
 8001492:	d9f5      	bls.n	8001480 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8001494:	2003      	movs	r0, #3
 8001496:	e0fd      	b.n	8001694 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001498:	6823      	ldr	r3, [r4, #0]
 800149a:	f013 0f04 	tst.w	r3, #4
 800149e:	d077      	beq.n	8001590 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a0:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <HAL_RCC_OscConfig+0x294>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80014a8:	d133      	bne.n	8001512 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	4b2c      	ldr	r3, [pc, #176]	; (8001560 <HAL_RCC_OscConfig+0x294>)
 80014b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014b6:	641a      	str	r2, [r3, #64]	; 0x40
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	9301      	str	r3, [sp, #4]
 80014c0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80014c2:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c4:	4b28      	ldr	r3, [pc, #160]	; (8001568 <HAL_RCC_OscConfig+0x29c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80014cc:	d023      	beq.n	8001516 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ce:	68a3      	ldr	r3, [r4, #8]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d034      	beq.n	800153e <HAL_RCC_OscConfig+0x272>
 80014d4:	2b05      	cmp	r3, #5
 80014d6:	d038      	beq.n	800154a <HAL_RCC_OscConfig+0x27e>
 80014d8:	4b21      	ldr	r3, [pc, #132]	; (8001560 <HAL_RCC_OscConfig+0x294>)
 80014da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80014dc:	f022 0201 	bic.w	r2, r2, #1
 80014e0:	671a      	str	r2, [r3, #112]	; 0x70
 80014e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80014e4:	f022 0204 	bic.w	r2, r2, #4
 80014e8:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014ea:	68a3      	ldr	r3, [r4, #8]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d03d      	beq.n	800156c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f0:	f7ff f83e 	bl	8000570 <HAL_GetTick>
 80014f4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f6:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <HAL_RCC_OscConfig+0x294>)
 80014f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fa:	f013 0f02 	tst.w	r3, #2
 80014fe:	d146      	bne.n	800158e <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001500:	f7ff f836 	bl	8000570 <HAL_GetTick>
 8001504:	1b80      	subs	r0, r0, r6
 8001506:	f241 3388 	movw	r3, #5000	; 0x1388
 800150a:	4298      	cmp	r0, r3
 800150c:	d9f3      	bls.n	80014f6 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800150e:	2003      	movs	r0, #3
 8001510:	e0c0      	b.n	8001694 <HAL_RCC_OscConfig+0x3c8>
    FlagStatus       pwrclkchanged = RESET;
 8001512:	2500      	movs	r5, #0
 8001514:	e7d6      	b.n	80014c4 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001516:	4a14      	ldr	r2, [pc, #80]	; (8001568 <HAL_RCC_OscConfig+0x29c>)
 8001518:	6813      	ldr	r3, [r2, #0]
 800151a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800151e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001520:	f7ff f826 	bl	8000570 <HAL_GetTick>
 8001524:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <HAL_RCC_OscConfig+0x29c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800152e:	d1ce      	bne.n	80014ce <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001530:	f7ff f81e 	bl	8000570 <HAL_GetTick>
 8001534:	1b80      	subs	r0, r0, r6
 8001536:	2802      	cmp	r0, #2
 8001538:	d9f5      	bls.n	8001526 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 800153a:	2003      	movs	r0, #3
 800153c:	e0aa      	b.n	8001694 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800153e:	4a08      	ldr	r2, [pc, #32]	; (8001560 <HAL_RCC_OscConfig+0x294>)
 8001540:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	6713      	str	r3, [r2, #112]	; 0x70
 8001548:	e7cf      	b.n	80014ea <HAL_RCC_OscConfig+0x21e>
 800154a:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_RCC_OscConfig+0x294>)
 800154c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800154e:	f042 0204 	orr.w	r2, r2, #4
 8001552:	671a      	str	r2, [r3, #112]	; 0x70
 8001554:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001556:	f042 0201 	orr.w	r2, r2, #1
 800155a:	671a      	str	r2, [r3, #112]	; 0x70
 800155c:	e7c5      	b.n	80014ea <HAL_RCC_OscConfig+0x21e>
 800155e:	bf00      	nop
 8001560:	40023800 	.word	0x40023800
 8001564:	42470000 	.word	0x42470000
 8001568:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156c:	f7ff f800 	bl	8000570 <HAL_GetTick>
 8001570:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001572:	4b4f      	ldr	r3, [pc, #316]	; (80016b0 <HAL_RCC_OscConfig+0x3e4>)
 8001574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001576:	f013 0f02 	tst.w	r3, #2
 800157a:	d008      	beq.n	800158e <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157c:	f7fe fff8 	bl	8000570 <HAL_GetTick>
 8001580:	1b80      	subs	r0, r0, r6
 8001582:	f241 3388 	movw	r3, #5000	; 0x1388
 8001586:	4298      	cmp	r0, r3
 8001588:	d9f3      	bls.n	8001572 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 800158a:	2003      	movs	r0, #3
 800158c:	e082      	b.n	8001694 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800158e:	b9e5      	cbnz	r5, 80015ca <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001590:	69a3      	ldr	r3, [r4, #24]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d07d      	beq.n	8001692 <HAL_RCC_OscConfig+0x3c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001596:	4a46      	ldr	r2, [pc, #280]	; (80016b0 <HAL_RCC_OscConfig+0x3e4>)
 8001598:	6892      	ldr	r2, [r2, #8]
 800159a:	f002 020c 	and.w	r2, r2, #12
 800159e:	2a08      	cmp	r2, #8
 80015a0:	d051      	beq.n	8001646 <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d017      	beq.n	80015d6 <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a6:	4b43      	ldr	r3, [pc, #268]	; (80016b4 <HAL_RCC_OscConfig+0x3e8>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7fe ffe0 	bl	8000570 <HAL_GetTick>
 80015b0:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b2:	4b3f      	ldr	r3, [pc, #252]	; (80016b0 <HAL_RCC_OscConfig+0x3e4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80015ba:	d042      	beq.n	8001642 <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015bc:	f7fe ffd8 	bl	8000570 <HAL_GetTick>
 80015c0:	1b00      	subs	r0, r0, r4
 80015c2:	2802      	cmp	r0, #2
 80015c4:	d9f5      	bls.n	80015b2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80015c6:	2003      	movs	r0, #3
 80015c8:	e064      	b.n	8001694 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ca:	4a39      	ldr	r2, [pc, #228]	; (80016b0 <HAL_RCC_OscConfig+0x3e4>)
 80015cc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80015ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015d2:	6413      	str	r3, [r2, #64]	; 0x40
 80015d4:	e7dc      	b.n	8001590 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80015d6:	4b37      	ldr	r3, [pc, #220]	; (80016b4 <HAL_RCC_OscConfig+0x3e8>)
 80015d8:	2200      	movs	r2, #0
 80015da:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80015dc:	f7fe ffc8 	bl	8000570 <HAL_GetTick>
 80015e0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e2:	4b33      	ldr	r3, [pc, #204]	; (80016b0 <HAL_RCC_OscConfig+0x3e4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80015ea:	d006      	beq.n	80015fa <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ec:	f7fe ffc0 	bl	8000570 <HAL_GetTick>
 80015f0:	1b40      	subs	r0, r0, r5
 80015f2:	2802      	cmp	r0, #2
 80015f4:	d9f5      	bls.n	80015e2 <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 80015f6:	2003      	movs	r0, #3
 80015f8:	e04c      	b.n	8001694 <HAL_RCC_OscConfig+0x3c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015fa:	69e3      	ldr	r3, [r4, #28]
 80015fc:	6a22      	ldr	r2, [r4, #32]
 80015fe:	4313      	orrs	r3, r2
 8001600:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001602:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001606:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001608:	0852      	lsrs	r2, r2, #1
 800160a:	3a01      	subs	r2, #1
 800160c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001610:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001612:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001616:	4a26      	ldr	r2, [pc, #152]	; (80016b0 <HAL_RCC_OscConfig+0x3e4>)
 8001618:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800161a:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <HAL_RCC_OscConfig+0x3e8>)
 800161c:	2201      	movs	r2, #1
 800161e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001620:	f7fe ffa6 	bl	8000570 <HAL_GetTick>
 8001624:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001626:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <HAL_RCC_OscConfig+0x3e4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800162e:	d106      	bne.n	800163e <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001630:	f7fe ff9e 	bl	8000570 <HAL_GetTick>
 8001634:	1b00      	subs	r0, r0, r4
 8001636:	2802      	cmp	r0, #2
 8001638:	d9f5      	bls.n	8001626 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 800163a:	2003      	movs	r0, #3
 800163c:	e02a      	b.n	8001694 <HAL_RCC_OscConfig+0x3c8>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800163e:	2000      	movs	r0, #0
 8001640:	e028      	b.n	8001694 <HAL_RCC_OscConfig+0x3c8>
 8001642:	2000      	movs	r0, #0
 8001644:	e026      	b.n	8001694 <HAL_RCC_OscConfig+0x3c8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001646:	2b01      	cmp	r3, #1
 8001648:	d026      	beq.n	8001698 <HAL_RCC_OscConfig+0x3cc>
        pll_config = RCC->CFGR;
 800164a:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <HAL_RCC_OscConfig+0x3e4>)
 800164c:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800164e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8001652:	69e2      	ldr	r2, [r4, #28]
 8001654:	4291      	cmp	r1, r2
 8001656:	d121      	bne.n	800169c <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001658:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800165c:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165e:	428a      	cmp	r2, r1
 8001660:	d11e      	bne.n	80016a0 <HAL_RCC_OscConfig+0x3d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001662:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001664:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001668:	401a      	ands	r2, r3
 800166a:	428a      	cmp	r2, r1
 800166c:	d11a      	bne.n	80016a4 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800166e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001672:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001674:	428a      	cmp	r2, r1
 8001676:	d117      	bne.n	80016a8 <HAL_RCC_OscConfig+0x3dc>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001678:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800167c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800167e:	4293      	cmp	r3, r2
 8001680:	d114      	bne.n	80016ac <HAL_RCC_OscConfig+0x3e0>
  return HAL_OK;
 8001682:	2000      	movs	r0, #0
 8001684:	e006      	b.n	8001694 <HAL_RCC_OscConfig+0x3c8>
    return HAL_ERROR;
 8001686:	2001      	movs	r0, #1
}
 8001688:	4770      	bx	lr
        return HAL_ERROR;
 800168a:	2001      	movs	r0, #1
 800168c:	e002      	b.n	8001694 <HAL_RCC_OscConfig+0x3c8>
        return HAL_ERROR;
 800168e:	2001      	movs	r0, #1
 8001690:	e000      	b.n	8001694 <HAL_RCC_OscConfig+0x3c8>
  return HAL_OK;
 8001692:	2000      	movs	r0, #0
}
 8001694:	b002      	add	sp, #8
 8001696:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001698:	2001      	movs	r0, #1
 800169a:	e7fb      	b.n	8001694 <HAL_RCC_OscConfig+0x3c8>
          return HAL_ERROR;
 800169c:	2001      	movs	r0, #1
 800169e:	e7f9      	b.n	8001694 <HAL_RCC_OscConfig+0x3c8>
 80016a0:	2001      	movs	r0, #1
 80016a2:	e7f7      	b.n	8001694 <HAL_RCC_OscConfig+0x3c8>
 80016a4:	2001      	movs	r0, #1
 80016a6:	e7f5      	b.n	8001694 <HAL_RCC_OscConfig+0x3c8>
 80016a8:	2001      	movs	r0, #1
 80016aa:	e7f3      	b.n	8001694 <HAL_RCC_OscConfig+0x3c8>
 80016ac:	2001      	movs	r0, #1
 80016ae:	e7f1      	b.n	8001694 <HAL_RCC_OscConfig+0x3c8>
 80016b0:	40023800 	.word	0x40023800
 80016b4:	42470000 	.word	0x42470000

080016b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016b8:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016ba:	4b25      	ldr	r3, [pc, #148]	; (8001750 <HAL_RCC_GetSysClockFreq+0x98>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 030c 	and.w	r3, r3, #12
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	d03f      	beq.n	8001746 <HAL_RCC_GetSysClockFreq+0x8e>
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d13f      	bne.n	800174a <HAL_RCC_GetSysClockFreq+0x92>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016ca:	4b21      	ldr	r3, [pc, #132]	; (8001750 <HAL_RCC_GetSysClockFreq+0x98>)
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80016d8:	d012      	beq.n	8001700 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016da:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <HAL_RCC_GetSysClockFreq+0x98>)
 80016dc:	6859      	ldr	r1, [r3, #4]
 80016de:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80016e2:	481c      	ldr	r0, [pc, #112]	; (8001754 <HAL_RCC_GetSysClockFreq+0x9c>)
 80016e4:	2300      	movs	r3, #0
 80016e6:	fba1 0100 	umull	r0, r1, r1, r0
 80016ea:	f7fe fd75 	bl	80001d8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016ee:	4b18      	ldr	r3, [pc, #96]	; (8001750 <HAL_RCC_GetSysClockFreq+0x98>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80016f6:	3301      	adds	r3, #1
 80016f8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80016fa:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80016fe:	e025      	b.n	800174c <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001700:	4b13      	ldr	r3, [pc, #76]	; (8001750 <HAL_RCC_GetSysClockFreq+0x98>)
 8001702:	6859      	ldr	r1, [r3, #4]
 8001704:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8001708:	ea4f 114c 	mov.w	r1, ip, lsl #5
 800170c:	ebb1 000c 	subs.w	r0, r1, ip
 8001710:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001714:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001718:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800171c:	0181      	lsls	r1, r0, #6
 800171e:	1a09      	subs	r1, r1, r0
 8001720:	eb63 030e 	sbc.w	r3, r3, lr
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800172a:	00c9      	lsls	r1, r1, #3
 800172c:	eb11 0c0c 	adds.w	ip, r1, ip
 8001730:	f143 0300 	adc.w	r3, r3, #0
 8001734:	0299      	lsls	r1, r3, #10
 8001736:	2300      	movs	r3, #0
 8001738:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800173c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001740:	f7fe fd4a 	bl	80001d8 <__aeabi_uldivmod>
 8001744:	e7d3      	b.n	80016ee <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001746:	4803      	ldr	r0, [pc, #12]	; (8001754 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001748:	e000      	b.n	800174c <HAL_RCC_GetSysClockFreq+0x94>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800174a:	4803      	ldr	r0, [pc, #12]	; (8001758 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800174c:	bd08      	pop	{r3, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800
 8001754:	017d7840 	.word	0x017d7840
 8001758:	00f42400 	.word	0x00f42400

0800175c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800175c:	2800      	cmp	r0, #0
 800175e:	f000 809b 	beq.w	8001898 <HAL_RCC_ClockConfig+0x13c>
{
 8001762:	b570      	push	{r4, r5, r6, lr}
 8001764:	460d      	mov	r5, r1
 8001766:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001768:	4b4f      	ldr	r3, [pc, #316]	; (80018a8 <HAL_RCC_ClockConfig+0x14c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 030f 	and.w	r3, r3, #15
 8001770:	428b      	cmp	r3, r1
 8001772:	d208      	bcs.n	8001786 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001774:	b2cb      	uxtb	r3, r1
 8001776:	4a4c      	ldr	r2, [pc, #304]	; (80018a8 <HAL_RCC_ClockConfig+0x14c>)
 8001778:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800177a:	6813      	ldr	r3, [r2, #0]
 800177c:	f003 030f 	and.w	r3, r3, #15
 8001780:	428b      	cmp	r3, r1
 8001782:	f040 808b 	bne.w	800189c <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001786:	6823      	ldr	r3, [r4, #0]
 8001788:	f013 0f02 	tst.w	r3, #2
 800178c:	d017      	beq.n	80017be <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178e:	f013 0f04 	tst.w	r3, #4
 8001792:	d004      	beq.n	800179e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001794:	4a45      	ldr	r2, [pc, #276]	; (80018ac <HAL_RCC_ClockConfig+0x150>)
 8001796:	6893      	ldr	r3, [r2, #8]
 8001798:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800179c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179e:	6823      	ldr	r3, [r4, #0]
 80017a0:	f013 0f08 	tst.w	r3, #8
 80017a4:	d004      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a6:	4a41      	ldr	r2, [pc, #260]	; (80018ac <HAL_RCC_ClockConfig+0x150>)
 80017a8:	6893      	ldr	r3, [r2, #8]
 80017aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ae:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b0:	4a3e      	ldr	r2, [pc, #248]	; (80018ac <HAL_RCC_ClockConfig+0x150>)
 80017b2:	6893      	ldr	r3, [r2, #8]
 80017b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017b8:	68a1      	ldr	r1, [r4, #8]
 80017ba:	430b      	orrs	r3, r1
 80017bc:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017be:	6823      	ldr	r3, [r4, #0]
 80017c0:	f013 0f01 	tst.w	r3, #1
 80017c4:	d032      	beq.n	800182c <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c6:	6863      	ldr	r3, [r4, #4]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d021      	beq.n	8001810 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017cc:	1e9a      	subs	r2, r3, #2
 80017ce:	2a01      	cmp	r2, #1
 80017d0:	d925      	bls.n	800181e <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d2:	4a36      	ldr	r2, [pc, #216]	; (80018ac <HAL_RCC_ClockConfig+0x150>)
 80017d4:	6812      	ldr	r2, [r2, #0]
 80017d6:	f012 0f02 	tst.w	r2, #2
 80017da:	d061      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017dc:	4933      	ldr	r1, [pc, #204]	; (80018ac <HAL_RCC_ClockConfig+0x150>)
 80017de:	688a      	ldr	r2, [r1, #8]
 80017e0:	f022 0203 	bic.w	r2, r2, #3
 80017e4:	4313      	orrs	r3, r2
 80017e6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80017e8:	f7fe fec2 	bl	8000570 <HAL_GetTick>
 80017ec:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ee:	4b2f      	ldr	r3, [pc, #188]	; (80018ac <HAL_RCC_ClockConfig+0x150>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	6862      	ldr	r2, [r4, #4]
 80017f8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80017fc:	d016      	beq.n	800182c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017fe:	f7fe feb7 	bl	8000570 <HAL_GetTick>
 8001802:	1b80      	subs	r0, r0, r6
 8001804:	f241 3388 	movw	r3, #5000	; 0x1388
 8001808:	4298      	cmp	r0, r3
 800180a:	d9f0      	bls.n	80017ee <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 800180c:	2003      	movs	r0, #3
 800180e:	e042      	b.n	8001896 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001810:	4a26      	ldr	r2, [pc, #152]	; (80018ac <HAL_RCC_ClockConfig+0x150>)
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001818:	d1e0      	bne.n	80017dc <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800181a:	2001      	movs	r0, #1
 800181c:	e03b      	b.n	8001896 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181e:	4a23      	ldr	r2, [pc, #140]	; (80018ac <HAL_RCC_ClockConfig+0x150>)
 8001820:	6812      	ldr	r2, [r2, #0]
 8001822:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001826:	d1d9      	bne.n	80017dc <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001828:	2001      	movs	r0, #1
 800182a:	e034      	b.n	8001896 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800182c:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <HAL_RCC_ClockConfig+0x14c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 030f 	and.w	r3, r3, #15
 8001834:	42ab      	cmp	r3, r5
 8001836:	d907      	bls.n	8001848 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001838:	b2ea      	uxtb	r2, r5
 800183a:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <HAL_RCC_ClockConfig+0x14c>)
 800183c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 030f 	and.w	r3, r3, #15
 8001844:	42ab      	cmp	r3, r5
 8001846:	d12d      	bne.n	80018a4 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001848:	6823      	ldr	r3, [r4, #0]
 800184a:	f013 0f04 	tst.w	r3, #4
 800184e:	d006      	beq.n	800185e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001850:	4a16      	ldr	r2, [pc, #88]	; (80018ac <HAL_RCC_ClockConfig+0x150>)
 8001852:	6893      	ldr	r3, [r2, #8]
 8001854:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001858:	68e1      	ldr	r1, [r4, #12]
 800185a:	430b      	orrs	r3, r1
 800185c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185e:	6823      	ldr	r3, [r4, #0]
 8001860:	f013 0f08 	tst.w	r3, #8
 8001864:	d007      	beq.n	8001876 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001866:	4a11      	ldr	r2, [pc, #68]	; (80018ac <HAL_RCC_ClockConfig+0x150>)
 8001868:	6893      	ldr	r3, [r2, #8]
 800186a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800186e:	6921      	ldr	r1, [r4, #16]
 8001870:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001874:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001876:	f7ff ff1f 	bl	80016b8 <HAL_RCC_GetSysClockFreq>
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <HAL_RCC_ClockConfig+0x150>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001882:	4a0b      	ldr	r2, [pc, #44]	; (80018b0 <HAL_RCC_ClockConfig+0x154>)
 8001884:	5cd3      	ldrb	r3, [r2, r3]
 8001886:	40d8      	lsrs	r0, r3
 8001888:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_RCC_ClockConfig+0x158>)
 800188a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800188c:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <HAL_RCC_ClockConfig+0x15c>)
 800188e:	6818      	ldr	r0, [r3, #0]
 8001890:	f7fe fe24 	bl	80004dc <HAL_InitTick>
  return HAL_OK;
 8001894:	2000      	movs	r0, #0
}
 8001896:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001898:	2001      	movs	r0, #1
}
 800189a:	4770      	bx	lr
      return HAL_ERROR;
 800189c:	2001      	movs	r0, #1
 800189e:	e7fa      	b.n	8001896 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80018a0:	2001      	movs	r0, #1
 80018a2:	e7f8      	b.n	8001896 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80018a4:	2001      	movs	r0, #1
 80018a6:	e7f6      	b.n	8001896 <HAL_RCC_ClockConfig+0x13a>
 80018a8:	40023c00 	.word	0x40023c00
 80018ac:	40023800 	.word	0x40023800
 80018b0:	08005554 	.word	0x08005554
 80018b4:	20000ae0 	.word	0x20000ae0
 80018b8:	20000004 	.word	0x20000004

080018bc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80018bc:	4b01      	ldr	r3, [pc, #4]	; (80018c4 <HAL_RCC_GetHCLKFreq+0x8>)
 80018be:	6818      	ldr	r0, [r3, #0]
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000ae0 	.word	0x20000ae0

080018c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018c8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018ca:	f7ff fff7 	bl	80018bc <HAL_RCC_GetHCLKFreq>
 80018ce:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80018d6:	4a03      	ldr	r2, [pc, #12]	; (80018e4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80018d8:	5cd3      	ldrb	r3, [r2, r3]
}
 80018da:	40d8      	lsrs	r0, r3
 80018dc:	bd08      	pop	{r3, pc}
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800
 80018e4:	08005564 	.word	0x08005564

080018e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018e8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018ea:	f7ff ffe7 	bl	80018bc <HAL_RCC_GetHCLKFreq>
 80018ee:	4b04      	ldr	r3, [pc, #16]	; (8001900 <HAL_RCC_GetPCLK2Freq+0x18>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80018f6:	4a03      	ldr	r2, [pc, #12]	; (8001904 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80018f8:	5cd3      	ldrb	r3, [r2, r3]
}
 80018fa:	40d8      	lsrs	r0, r3
 80018fc:	bd08      	pop	{r3, pc}
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	08005564 	.word	0x08005564

08001908 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001908:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800190a:	6a03      	ldr	r3, [r0, #32]
 800190c:	f023 0301 	bic.w	r3, r3, #1
 8001910:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001912:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001914:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001916:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001918:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800191c:	680d      	ldr	r5, [r1, #0]
 800191e:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001920:	f023 0c02 	bic.w	ip, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001924:	688b      	ldr	r3, [r1, #8]
 8001926:	ea43 030c 	orr.w	r3, r3, ip

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800192a:	4d10      	ldr	r5, [pc, #64]	; (800196c <TIM_OC1_SetConfig+0x64>)
 800192c:	42a8      	cmp	r0, r5
 800192e:	d003      	beq.n	8001938 <TIM_OC1_SetConfig+0x30>
 8001930:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001934:	42a8      	cmp	r0, r5
 8001936:	d105      	bne.n	8001944 <TIM_OC1_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001938:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800193c:	68cd      	ldr	r5, [r1, #12]
 800193e:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001940:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001944:	4d09      	ldr	r5, [pc, #36]	; (800196c <TIM_OC1_SetConfig+0x64>)
 8001946:	42a8      	cmp	r0, r5
 8001948:	d003      	beq.n	8001952 <TIM_OC1_SetConfig+0x4a>
 800194a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800194e:	42a8      	cmp	r0, r5
 8001950:	d105      	bne.n	800195e <TIM_OC1_SetConfig+0x56>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001952:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001956:	694d      	ldr	r5, [r1, #20]
 8001958:	432a      	orrs	r2, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800195a:	698d      	ldr	r5, [r1, #24]
 800195c:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800195e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001960:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001962:	684a      	ldr	r2, [r1, #4]
 8001964:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001966:	6203      	str	r3, [r0, #32]
}
 8001968:	bc30      	pop	{r4, r5}
 800196a:	4770      	bx	lr
 800196c:	40010000 	.word	0x40010000

08001970 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001970:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001972:	6a03      	ldr	r3, [r0, #32]
 8001974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001978:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800197a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800197c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800197e:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001980:	f024 0c73 	bic.w	ip, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001984:	680c      	ldr	r4, [r1, #0]
 8001986:	ea44 050c 	orr.w	r5, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800198a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800198e:	688c      	ldr	r4, [r1, #8]
 8001990:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001994:	4c11      	ldr	r4, [pc, #68]	; (80019dc <TIM_OC3_SetConfig+0x6c>)
 8001996:	42a0      	cmp	r0, r4
 8001998:	d003      	beq.n	80019a2 <TIM_OC3_SetConfig+0x32>
 800199a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800199e:	42a0      	cmp	r0, r4
 80019a0:	d106      	bne.n	80019b0 <TIM_OC3_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80019a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80019a6:	68cc      	ldr	r4, [r1, #12]
 80019a8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80019ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80019b0:	4c0a      	ldr	r4, [pc, #40]	; (80019dc <TIM_OC3_SetConfig+0x6c>)
 80019b2:	42a0      	cmp	r0, r4
 80019b4:	d003      	beq.n	80019be <TIM_OC3_SetConfig+0x4e>
 80019b6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019ba:	42a0      	cmp	r0, r4
 80019bc:	d107      	bne.n	80019ce <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80019be:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80019c2:	694c      	ldr	r4, [r1, #20]
 80019c4:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80019c8:	698c      	ldr	r4, [r1, #24]
 80019ca:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80019ce:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80019d0:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80019d2:	684a      	ldr	r2, [r1, #4]
 80019d4:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80019d6:	6203      	str	r3, [r0, #32]
}
 80019d8:	bc30      	pop	{r4, r5}
 80019da:	4770      	bx	lr
 80019dc:	40010000 	.word	0x40010000

080019e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80019e0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80019e2:	6a03      	ldr	r3, [r0, #32]
 80019e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019e8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80019ea:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80019ec:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80019ee:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80019f0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80019f4:	680d      	ldr	r5, [r1, #0]
 80019f6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80019fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80019fe:	688d      	ldr	r5, [r1, #8]
 8001a00:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a04:	4d09      	ldr	r5, [pc, #36]	; (8001a2c <TIM_OC4_SetConfig+0x4c>)
 8001a06:	42a8      	cmp	r0, r5
 8001a08:	d003      	beq.n	8001a12 <TIM_OC4_SetConfig+0x32>
 8001a0a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a0e:	42a8      	cmp	r0, r5
 8001a10:	d104      	bne.n	8001a1c <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001a12:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001a16:	694d      	ldr	r5, [r1, #20]
 8001a18:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a1c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001a1e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001a20:	684a      	ldr	r2, [r1, #4]
 8001a22:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a24:	6203      	str	r3, [r0, #32]
}
 8001a26:	bc30      	pop	{r4, r5}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40010000 	.word	0x40010000

08001a30 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001a30:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a32:	4a30      	ldr	r2, [pc, #192]	; (8001af4 <TIM_Base_SetConfig+0xc4>)
 8001a34:	4290      	cmp	r0, r2
 8001a36:	d012      	beq.n	8001a5e <TIM_Base_SetConfig+0x2e>
 8001a38:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a3c:	d00f      	beq.n	8001a5e <TIM_Base_SetConfig+0x2e>
 8001a3e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001a42:	4290      	cmp	r0, r2
 8001a44:	d00b      	beq.n	8001a5e <TIM_Base_SetConfig+0x2e>
 8001a46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a4a:	4290      	cmp	r0, r2
 8001a4c:	d007      	beq.n	8001a5e <TIM_Base_SetConfig+0x2e>
 8001a4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a52:	4290      	cmp	r0, r2
 8001a54:	d003      	beq.n	8001a5e <TIM_Base_SetConfig+0x2e>
 8001a56:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001a5a:	4290      	cmp	r0, r2
 8001a5c:	d103      	bne.n	8001a66 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001a62:	684a      	ldr	r2, [r1, #4]
 8001a64:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a66:	4a23      	ldr	r2, [pc, #140]	; (8001af4 <TIM_Base_SetConfig+0xc4>)
 8001a68:	4290      	cmp	r0, r2
 8001a6a:	d02a      	beq.n	8001ac2 <TIM_Base_SetConfig+0x92>
 8001a6c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a70:	d027      	beq.n	8001ac2 <TIM_Base_SetConfig+0x92>
 8001a72:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001a76:	4290      	cmp	r0, r2
 8001a78:	d023      	beq.n	8001ac2 <TIM_Base_SetConfig+0x92>
 8001a7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a7e:	4290      	cmp	r0, r2
 8001a80:	d01f      	beq.n	8001ac2 <TIM_Base_SetConfig+0x92>
 8001a82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a86:	4290      	cmp	r0, r2
 8001a88:	d01b      	beq.n	8001ac2 <TIM_Base_SetConfig+0x92>
 8001a8a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001a8e:	4290      	cmp	r0, r2
 8001a90:	d017      	beq.n	8001ac2 <TIM_Base_SetConfig+0x92>
 8001a92:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001a96:	4290      	cmp	r0, r2
 8001a98:	d013      	beq.n	8001ac2 <TIM_Base_SetConfig+0x92>
 8001a9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a9e:	4290      	cmp	r0, r2
 8001aa0:	d00f      	beq.n	8001ac2 <TIM_Base_SetConfig+0x92>
 8001aa2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001aa6:	4290      	cmp	r0, r2
 8001aa8:	d00b      	beq.n	8001ac2 <TIM_Base_SetConfig+0x92>
 8001aaa:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001aae:	4290      	cmp	r0, r2
 8001ab0:	d007      	beq.n	8001ac2 <TIM_Base_SetConfig+0x92>
 8001ab2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ab6:	4290      	cmp	r0, r2
 8001ab8:	d003      	beq.n	8001ac2 <TIM_Base_SetConfig+0x92>
 8001aba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001abe:	4290      	cmp	r0, r2
 8001ac0:	d103      	bne.n	8001aca <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ac6:	68ca      	ldr	r2, [r1, #12]
 8001ac8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ace:	694a      	ldr	r2, [r1, #20]
 8001ad0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001ad2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ad4:	688b      	ldr	r3, [r1, #8]
 8001ad6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001ad8:	680b      	ldr	r3, [r1, #0]
 8001ada:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <TIM_Base_SetConfig+0xc4>)
 8001ade:	4298      	cmp	r0, r3
 8001ae0:	d003      	beq.n	8001aea <TIM_Base_SetConfig+0xba>
 8001ae2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ae6:	4298      	cmp	r0, r3
 8001ae8:	d101      	bne.n	8001aee <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8001aea:	690b      	ldr	r3, [r1, #16]
 8001aec:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001aee:	2301      	movs	r3, #1
 8001af0:	6143      	str	r3, [r0, #20]
}
 8001af2:	4770      	bx	lr
 8001af4:	40010000 	.word	0x40010000

08001af8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8001af8:	b1b0      	cbz	r0, 8001b28 <HAL_TIM_PWM_Init+0x30>
{
 8001afa:	b510      	push	{r4, lr}
 8001afc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001afe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001b02:	b163      	cbz	r3, 8001b1e <HAL_TIM_PWM_Init+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 8001b04:	2302      	movs	r3, #2
 8001b06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b0a:	4621      	mov	r1, r4
 8001b0c:	f851 0b04 	ldr.w	r0, [r1], #4
 8001b10:	f7ff ff8e 	bl	8001a30 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001b14:	2301      	movs	r3, #1
 8001b16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001b1a:	2000      	movs	r0, #0
}
 8001b1c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001b1e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001b22:	f000 ffdb 	bl	8002adc <HAL_TIM_PWM_MspInit>
 8001b26:	e7ed      	b.n	8001b04 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8001b28:	2001      	movs	r0, #1
}
 8001b2a:	4770      	bx	lr

08001b2c <TIM_OC2_SetConfig>:
{
 8001b2c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b2e:	6a03      	ldr	r3, [r0, #32]
 8001b30:	f023 0310 	bic.w	r3, r3, #16
 8001b34:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001b36:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001b38:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001b3a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001b3c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b40:	680d      	ldr	r5, [r1, #0]
 8001b42:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8001b46:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001b4a:	688d      	ldr	r5, [r1, #8]
 8001b4c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001b50:	4d11      	ldr	r5, [pc, #68]	; (8001b98 <TIM_OC2_SetConfig+0x6c>)
 8001b52:	42a8      	cmp	r0, r5
 8001b54:	d003      	beq.n	8001b5e <TIM_OC2_SetConfig+0x32>
 8001b56:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b5a:	42a8      	cmp	r0, r5
 8001b5c:	d106      	bne.n	8001b6c <TIM_OC2_SetConfig+0x40>
    tmpccer &= ~TIM_CCER_CC2NP;
 8001b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b62:	68cd      	ldr	r5, [r1, #12]
 8001b64:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8001b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b6c:	4d0a      	ldr	r5, [pc, #40]	; (8001b98 <TIM_OC2_SetConfig+0x6c>)
 8001b6e:	42a8      	cmp	r0, r5
 8001b70:	d003      	beq.n	8001b7a <TIM_OC2_SetConfig+0x4e>
 8001b72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b76:	42a8      	cmp	r0, r5
 8001b78:	d107      	bne.n	8001b8a <TIM_OC2_SetConfig+0x5e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001b7a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001b7e:	694d      	ldr	r5, [r1, #20]
 8001b80:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b84:	698d      	ldr	r5, [r1, #24]
 8001b86:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001b8a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001b8c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001b8e:	684a      	ldr	r2, [r1, #4]
 8001b90:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001b92:	6203      	str	r3, [r0, #32]
}
 8001b94:	bc30      	pop	{r4, r5}
 8001b96:	4770      	bx	lr
 8001b98:	40010000 	.word	0x40010000

08001b9c <HAL_TIM_PWM_ConfigChannel>:
{
 8001b9c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001b9e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d066      	beq.n	8001c74 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8001ba6:	4604      	mov	r4, r0
 8001ba8:	460d      	mov	r5, r1
 8001baa:	2301      	movs	r3, #1
 8001bac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8001bb6:	2a0c      	cmp	r2, #12
 8001bb8:	d81a      	bhi.n	8001bf0 <HAL_TIM_PWM_ConfigChannel+0x54>
 8001bba:	e8df f002 	tbb	[pc, r2]
 8001bbe:	1907      	.short	0x1907
 8001bc0:	19201919 	.word	0x19201919
 8001bc4:	19341919 	.word	0x19341919
 8001bc8:	1919      	.short	0x1919
 8001bca:	47          	.byte	0x47
 8001bcb:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001bcc:	6800      	ldr	r0, [r0, #0]
 8001bce:	f7ff fe9b 	bl	8001908 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001bd2:	6822      	ldr	r2, [r4, #0]
 8001bd4:	6993      	ldr	r3, [r2, #24]
 8001bd6:	f043 0308 	orr.w	r3, r3, #8
 8001bda:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001bdc:	6822      	ldr	r2, [r4, #0]
 8001bde:	6993      	ldr	r3, [r2, #24]
 8001be0:	f023 0304 	bic.w	r3, r3, #4
 8001be4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001be6:	6822      	ldr	r2, [r4, #0]
 8001be8:	6993      	ldr	r3, [r2, #24]
 8001bea:	6929      	ldr	r1, [r5, #16]
 8001bec:	430b      	orrs	r3, r1
 8001bee:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001bfc:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001bfe:	6800      	ldr	r0, [r0, #0]
 8001c00:	f7ff ff94 	bl	8001b2c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c04:	6822      	ldr	r2, [r4, #0]
 8001c06:	6993      	ldr	r3, [r2, #24]
 8001c08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c0c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c0e:	6822      	ldr	r2, [r4, #0]
 8001c10:	6993      	ldr	r3, [r2, #24]
 8001c12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c16:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c18:	6822      	ldr	r2, [r4, #0]
 8001c1a:	6993      	ldr	r3, [r2, #24]
 8001c1c:	6929      	ldr	r1, [r5, #16]
 8001c1e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001c22:	6193      	str	r3, [r2, #24]
      break;
 8001c24:	e7e4      	b.n	8001bf0 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c26:	6800      	ldr	r0, [r0, #0]
 8001c28:	f7ff fea2 	bl	8001970 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c2c:	6822      	ldr	r2, [r4, #0]
 8001c2e:	69d3      	ldr	r3, [r2, #28]
 8001c30:	f043 0308 	orr.w	r3, r3, #8
 8001c34:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c36:	6822      	ldr	r2, [r4, #0]
 8001c38:	69d3      	ldr	r3, [r2, #28]
 8001c3a:	f023 0304 	bic.w	r3, r3, #4
 8001c3e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c40:	6822      	ldr	r2, [r4, #0]
 8001c42:	69d3      	ldr	r3, [r2, #28]
 8001c44:	6929      	ldr	r1, [r5, #16]
 8001c46:	430b      	orrs	r3, r1
 8001c48:	61d3      	str	r3, [r2, #28]
      break;
 8001c4a:	e7d1      	b.n	8001bf0 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c4c:	6800      	ldr	r0, [r0, #0]
 8001c4e:	f7ff fec7 	bl	80019e0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c52:	6822      	ldr	r2, [r4, #0]
 8001c54:	69d3      	ldr	r3, [r2, #28]
 8001c56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c5a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c5c:	6822      	ldr	r2, [r4, #0]
 8001c5e:	69d3      	ldr	r3, [r2, #28]
 8001c60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c64:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c66:	6822      	ldr	r2, [r4, #0]
 8001c68:	69d3      	ldr	r3, [r2, #28]
 8001c6a:	6929      	ldr	r1, [r5, #16]
 8001c6c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001c70:	61d3      	str	r3, [r2, #28]
      break;
 8001c72:	e7bd      	b.n	8001bf0 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8001c74:	2002      	movs	r0, #2
 8001c76:	e7c1      	b.n	8001bfc <HAL_TIM_PWM_ConfigChannel+0x60>

08001c78 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001c78:	f001 011f 	and.w	r1, r1, #31
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001c82:	6a03      	ldr	r3, [r0, #32]
 8001c84:	ea23 030c 	bic.w	r3, r3, ip
 8001c88:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001c8a:	6a03      	ldr	r3, [r0, #32]
 8001c8c:	fa02 f101 	lsl.w	r1, r2, r1
 8001c90:	430b      	orrs	r3, r1
 8001c92:	6203      	str	r3, [r0, #32]
}
 8001c94:	4770      	bx	lr
	...

08001c98 <HAL_TIM_OC_Start>:
{
 8001c98:	b510      	push	{r4, lr}
 8001c9a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	6800      	ldr	r0, [r0, #0]
 8001ca0:	f7ff ffea 	bl	8001c78 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ca4:	6823      	ldr	r3, [r4, #0]
 8001ca6:	4a0b      	ldr	r2, [pc, #44]	; (8001cd4 <HAL_TIM_OC_Start+0x3c>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d003      	beq.n	8001cb4 <HAL_TIM_OC_Start+0x1c>
 8001cac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d103      	bne.n	8001cbc <HAL_TIM_OC_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8001cb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cba:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cbc:	6822      	ldr	r2, [r4, #0]
 8001cbe:	6893      	ldr	r3, [r2, #8]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cc4:	2b06      	cmp	r3, #6
 8001cc6:	d003      	beq.n	8001cd0 <HAL_TIM_OC_Start+0x38>
    __HAL_TIM_ENABLE(htim);
 8001cc8:	6813      	ldr	r3, [r2, #0]
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	6013      	str	r3, [r2, #0]
}
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	bd10      	pop	{r4, pc}
 8001cd4:	40010000 	.word	0x40010000

08001cd8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001cd8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d03d      	beq.n	8001d5c <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 8001ce0:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001cee:	6803      	ldr	r3, [r0, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001cf2:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001cf4:	f022 0c70 	bic.w	ip, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001cf8:	680a      	ldr	r2, [r1, #0]
 8001cfa:	ea42 020c 	orr.w	r2, r2, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001cfe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d00:	6803      	ldr	r3, [r0, #0]
 8001d02:	4a17      	ldr	r2, [pc, #92]	; (8001d60 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d01a      	beq.n	8001d3e <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8001d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d0c:	d017      	beq.n	8001d3e <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8001d0e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d013      	beq.n	8001d3e <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8001d16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d00f      	beq.n	8001d3e <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8001d1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d00b      	beq.n	8001d3e <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8001d26:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d007      	beq.n	8001d3e <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8001d2e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d003      	beq.n	8001d3e <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8001d36:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d104      	bne.n	8001d48 <HAL_TIMEx_MasterConfigSynchronization+0x70>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d3e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d42:	684a      	ldr	r2, [r1, #4]
 8001d44:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001d46:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8001d54:	4618      	mov	r0, r3
}
 8001d56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d5a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001d5c:	2002      	movs	r0, #2
}
 8001d5e:	4770      	bx	lr
 8001d60:	40010000 	.word	0x40010000

08001d64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d64:	b538      	push	{r3, r4, r5, lr}
 8001d66:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d68:	6802      	ldr	r2, [r0, #0]
 8001d6a:	6913      	ldr	r3, [r2, #16]
 8001d6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d70:	68c1      	ldr	r1, [r0, #12]
 8001d72:	430b      	orrs	r3, r1
 8001d74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d76:	6883      	ldr	r3, [r0, #8]
 8001d78:	6902      	ldr	r2, [r0, #16]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	6942      	ldr	r2, [r0, #20]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	69c2      	ldr	r2, [r0, #28]
 8001d82:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001d84:	6801      	ldr	r1, [r0, #0]
 8001d86:	68cb      	ldr	r3, [r1, #12]
 8001d88:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001d8c:	f023 030c 	bic.w	r3, r3, #12
 8001d90:	4313      	orrs	r3, r2
 8001d92:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d94:	6802      	ldr	r2, [r0, #0]
 8001d96:	6953      	ldr	r3, [r2, #20]
 8001d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d9c:	6981      	ldr	r1, [r0, #24]
 8001d9e:	430b      	orrs	r3, r1
 8001da0:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001da2:	69c3      	ldr	r3, [r0, #28]
 8001da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001da8:	d035      	beq.n	8001e16 <UART_SetConfig+0xb2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001daa:	6803      	ldr	r3, [r0, #0]
 8001dac:	4a60      	ldr	r2, [pc, #384]	; (8001f30 <UART_SetConfig+0x1cc>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	f000 8091 	beq.w	8001ed6 <UART_SetConfig+0x172>
 8001db4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001db8:	4293      	cmp	r3, r2
 8001dba:	f000 808c 	beq.w	8001ed6 <UART_SetConfig+0x172>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001dbe:	f7ff fd83 	bl	80018c8 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	1803      	adds	r3, r0, r0
 8001dc6:	4149      	adcs	r1, r1
 8001dc8:	181b      	adds	r3, r3, r0
 8001dca:	f141 0100 	adc.w	r1, r1, #0
 8001dce:	00c9      	lsls	r1, r1, #3
 8001dd0:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	1818      	adds	r0, r3, r0
 8001dd8:	6863      	ldr	r3, [r4, #4]
 8001dda:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8001dde:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8001de2:	f141 0100 	adc.w	r1, r1, #0
 8001de6:	f7fe f9f7 	bl	80001d8 <__aeabi_uldivmod>
 8001dea:	4d52      	ldr	r5, [pc, #328]	; (8001f34 <UART_SetConfig+0x1d0>)
 8001dec:	fba5 3200 	umull	r3, r2, r5, r0
 8001df0:	0951      	lsrs	r1, r2, #5
 8001df2:	2364      	movs	r3, #100	; 0x64
 8001df4:	fb03 0311 	mls	r3, r3, r1, r0
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	3332      	adds	r3, #50	; 0x32
 8001dfc:	fba5 2303 	umull	r2, r3, r5, r3
 8001e00:	095b      	lsrs	r3, r3, #5
 8001e02:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e06:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	6821      	ldr	r1, [r4, #0]
 8001e10:	4413      	add	r3, r2
 8001e12:	608b      	str	r3, [r1, #8]
    }
  }
}
 8001e14:	e08a      	b.n	8001f2c <UART_SetConfig+0x1c8>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e16:	6803      	ldr	r3, [r0, #0]
 8001e18:	4a45      	ldr	r2, [pc, #276]	; (8001f30 <UART_SetConfig+0x1cc>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d02f      	beq.n	8001e7e <UART_SetConfig+0x11a>
 8001e1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d02b      	beq.n	8001e7e <UART_SetConfig+0x11a>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e26:	f7ff fd4f 	bl	80018c8 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	1802      	adds	r2, r0, r0
 8001e2e:	eb43 0103 	adc.w	r1, r3, r3
 8001e32:	1812      	adds	r2, r2, r0
 8001e34:	f141 0100 	adc.w	r1, r1, #0
 8001e38:	00c9      	lsls	r1, r1, #3
 8001e3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e3e:	00d2      	lsls	r2, r2, #3
 8001e40:	1810      	adds	r0, r2, r0
 8001e42:	f141 0100 	adc.w	r1, r1, #0
 8001e46:	6862      	ldr	r2, [r4, #4]
 8001e48:	1892      	adds	r2, r2, r2
 8001e4a:	415b      	adcs	r3, r3
 8001e4c:	f7fe f9c4 	bl	80001d8 <__aeabi_uldivmod>
 8001e50:	4d38      	ldr	r5, [pc, #224]	; (8001f34 <UART_SetConfig+0x1d0>)
 8001e52:	fba5 3200 	umull	r3, r2, r5, r0
 8001e56:	0951      	lsrs	r1, r2, #5
 8001e58:	2364      	movs	r3, #100	; 0x64
 8001e5a:	fb03 0311 	mls	r3, r3, r1, r0
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	3332      	adds	r3, #50	; 0x32
 8001e62:	fba5 2303 	umull	r2, r3, r5, r3
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	005a      	lsls	r2, r3, #1
 8001e6a:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8001e6e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	6821      	ldr	r1, [r4, #0]
 8001e78:	4413      	add	r3, r2
 8001e7a:	608b      	str	r3, [r1, #8]
 8001e7c:	e056      	b.n	8001f2c <UART_SetConfig+0x1c8>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e7e:	f7ff fd33 	bl	80018e8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e82:	2300      	movs	r3, #0
 8001e84:	1802      	adds	r2, r0, r0
 8001e86:	eb43 0103 	adc.w	r1, r3, r3
 8001e8a:	1812      	adds	r2, r2, r0
 8001e8c:	f141 0100 	adc.w	r1, r1, #0
 8001e90:	00c9      	lsls	r1, r1, #3
 8001e92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e96:	00d2      	lsls	r2, r2, #3
 8001e98:	1810      	adds	r0, r2, r0
 8001e9a:	f141 0100 	adc.w	r1, r1, #0
 8001e9e:	6862      	ldr	r2, [r4, #4]
 8001ea0:	1892      	adds	r2, r2, r2
 8001ea2:	415b      	adcs	r3, r3
 8001ea4:	f7fe f998 	bl	80001d8 <__aeabi_uldivmod>
 8001ea8:	4d22      	ldr	r5, [pc, #136]	; (8001f34 <UART_SetConfig+0x1d0>)
 8001eaa:	fba5 3200 	umull	r3, r2, r5, r0
 8001eae:	0951      	lsrs	r1, r2, #5
 8001eb0:	2364      	movs	r3, #100	; 0x64
 8001eb2:	fb03 0311 	mls	r3, r3, r1, r0
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	3332      	adds	r3, #50	; 0x32
 8001eba:	fba5 2303 	umull	r2, r3, r5, r3
 8001ebe:	095b      	lsrs	r3, r3, #5
 8001ec0:	005a      	lsls	r2, r3, #1
 8001ec2:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8001ec6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	6821      	ldr	r1, [r4, #0]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	608b      	str	r3, [r1, #8]
 8001ed4:	e02a      	b.n	8001f2c <UART_SetConfig+0x1c8>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ed6:	f7ff fd07 	bl	80018e8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001eda:	2100      	movs	r1, #0
 8001edc:	1803      	adds	r3, r0, r0
 8001ede:	4149      	adcs	r1, r1
 8001ee0:	181b      	adds	r3, r3, r0
 8001ee2:	f141 0100 	adc.w	r1, r1, #0
 8001ee6:	00c9      	lsls	r1, r1, #3
 8001ee8:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	1818      	adds	r0, r3, r0
 8001ef0:	6863      	ldr	r3, [r4, #4]
 8001ef2:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8001ef6:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8001efa:	f141 0100 	adc.w	r1, r1, #0
 8001efe:	f7fe f96b 	bl	80001d8 <__aeabi_uldivmod>
 8001f02:	4d0c      	ldr	r5, [pc, #48]	; (8001f34 <UART_SetConfig+0x1d0>)
 8001f04:	fba5 3200 	umull	r3, r2, r5, r0
 8001f08:	0951      	lsrs	r1, r2, #5
 8001f0a:	2364      	movs	r3, #100	; 0x64
 8001f0c:	fb03 0311 	mls	r3, r3, r1, r0
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	3332      	adds	r3, #50	; 0x32
 8001f14:	fba5 2303 	umull	r2, r3, r5, r3
 8001f18:	095b      	lsrs	r3, r3, #5
 8001f1a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f1e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	6821      	ldr	r1, [r4, #0]
 8001f28:	4413      	add	r3, r2
 8001f2a:	608b      	str	r3, [r1, #8]
}
 8001f2c:	bd38      	pop	{r3, r4, r5, pc}
 8001f2e:	bf00      	nop
 8001f30:	40011000 	.word	0x40011000
 8001f34:	51eb851f 	.word	0x51eb851f

08001f38 <UART_WaitOnFlagUntilTimeout>:
{
 8001f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f3c:	4605      	mov	r5, r0
 8001f3e:	460f      	mov	r7, r1
 8001f40:	4616      	mov	r6, r2
 8001f42:	4699      	mov	r9, r3
 8001f44:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f48:	682c      	ldr	r4, [r5, #0]
 8001f4a:	6824      	ldr	r4, [r4, #0]
 8001f4c:	ea37 0304 	bics.w	r3, r7, r4
 8001f50:	bf0c      	ite	eq
 8001f52:	f04f 0c01 	moveq.w	ip, #1
 8001f56:	f04f 0c00 	movne.w	ip, #0
 8001f5a:	45b4      	cmp	ip, r6
 8001f5c:	d11f      	bne.n	8001f9e <UART_WaitOnFlagUntilTimeout+0x66>
    if (Timeout != HAL_MAX_DELAY)
 8001f5e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8001f62:	d0f1      	beq.n	8001f48 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f64:	f1b8 0f00 	cmp.w	r8, #0
 8001f68:	d005      	beq.n	8001f76 <UART_WaitOnFlagUntilTimeout+0x3e>
 8001f6a:	f7fe fb01 	bl	8000570 <HAL_GetTick>
 8001f6e:	eba0 0009 	sub.w	r0, r0, r9
 8001f72:	4540      	cmp	r0, r8
 8001f74:	d9e8      	bls.n	8001f48 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f76:	682a      	ldr	r2, [r5, #0]
 8001f78:	68d3      	ldr	r3, [r2, #12]
 8001f7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001f7e:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f80:	682a      	ldr	r2, [r5, #0]
 8001f82:	6953      	ldr	r3, [r2, #20]
 8001f84:	f023 0301 	bic.w	r3, r3, #1
 8001f88:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001f8a:	2320      	movs	r3, #32
 8001f8c:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001f90:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001f94:	2300      	movs	r3, #0
 8001f96:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8001f9a:	2003      	movs	r0, #3
 8001f9c:	e000      	b.n	8001fa0 <UART_WaitOnFlagUntilTimeout+0x68>
  return HAL_OK;
 8001f9e:	2000      	movs	r0, #0
}
 8001fa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001fa4 <HAL_UART_Init>:
  if (huart == NULL)
 8001fa4:	b358      	cbz	r0, 8001ffe <HAL_UART_Init+0x5a>
{
 8001fa6:	b510      	push	{r4, lr}
 8001fa8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001faa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001fae:	b30b      	cbz	r3, 8001ff4 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001fb0:	2324      	movs	r3, #36	; 0x24
 8001fb2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001fb6:	6822      	ldr	r2, [r4, #0]
 8001fb8:	68d3      	ldr	r3, [r2, #12]
 8001fba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fbe:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	f7ff fecf 	bl	8001d64 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fc6:	6822      	ldr	r2, [r4, #0]
 8001fc8:	6913      	ldr	r3, [r2, #16]
 8001fca:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001fce:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fd0:	6822      	ldr	r2, [r4, #0]
 8001fd2:	6953      	ldr	r3, [r2, #20]
 8001fd4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001fd8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001fda:	6822      	ldr	r2, [r4, #0]
 8001fdc:	68d3      	ldr	r3, [r2, #12]
 8001fde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fe2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001fe8:	2320      	movs	r3, #32
 8001fea:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001fee:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8001ff2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001ff4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001ff8:	f000 fe08 	bl	8002c0c <HAL_UART_MspInit>
 8001ffc:	e7d8      	b.n	8001fb0 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001ffe:	2001      	movs	r0, #1
}
 8002000:	4770      	bx	lr

08002002 <HAL_UART_Transmit>:
{
 8002002:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002006:	b083      	sub	sp, #12
 8002008:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800200a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b20      	cmp	r3, #32
 8002012:	d156      	bne.n	80020c2 <HAL_UART_Transmit+0xc0>
 8002014:	4604      	mov	r4, r0
 8002016:	460d      	mov	r5, r1
 8002018:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800201a:	2900      	cmp	r1, #0
 800201c:	d055      	beq.n	80020ca <HAL_UART_Transmit+0xc8>
 800201e:	2a00      	cmp	r2, #0
 8002020:	d055      	beq.n	80020ce <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8002022:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002026:	2b01      	cmp	r3, #1
 8002028:	d053      	beq.n	80020d2 <HAL_UART_Transmit+0xd0>
 800202a:	2301      	movs	r3, #1
 800202c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002030:	f04f 0900 	mov.w	r9, #0
 8002034:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002038:	2321      	movs	r3, #33	; 0x21
 800203a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800203e:	f7fe fa97 	bl	8000570 <HAL_GetTick>
 8002042:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002044:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002048:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 800204c:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8002050:	e010      	b.n	8002074 <HAL_UART_Transmit+0x72>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002052:	9600      	str	r6, [sp, #0]
 8002054:	463b      	mov	r3, r7
 8002056:	2200      	movs	r2, #0
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	4620      	mov	r0, r4
 800205c:	f7ff ff6c 	bl	8001f38 <UART_WaitOnFlagUntilTimeout>
 8002060:	2800      	cmp	r0, #0
 8002062:	d138      	bne.n	80020d6 <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002064:	882b      	ldrh	r3, [r5, #0]
 8002066:	6822      	ldr	r2, [r4, #0]
 8002068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800206c:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800206e:	6923      	ldr	r3, [r4, #16]
 8002070:	b9cb      	cbnz	r3, 80020a6 <HAL_UART_Transmit+0xa4>
          pData += 2U;
 8002072:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 8002074:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002076:	b29b      	uxth	r3, r3
 8002078:	b1bb      	cbz	r3, 80020aa <HAL_UART_Transmit+0xa8>
      huart->TxXferCount--;
 800207a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800207c:	b292      	uxth	r2, r2
 800207e:	3a01      	subs	r2, #1
 8002080:	b292      	uxth	r2, r2
 8002082:	84e2      	strh	r2, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002084:	68a3      	ldr	r3, [r4, #8]
 8002086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800208a:	d0e2      	beq.n	8002052 <HAL_UART_Transmit+0x50>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800208c:	9600      	str	r6, [sp, #0]
 800208e:	463b      	mov	r3, r7
 8002090:	2200      	movs	r2, #0
 8002092:	2180      	movs	r1, #128	; 0x80
 8002094:	4620      	mov	r0, r4
 8002096:	f7ff ff4f 	bl	8001f38 <UART_WaitOnFlagUntilTimeout>
 800209a:	b9f0      	cbnz	r0, 80020da <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800209c:	f815 2b01 	ldrb.w	r2, [r5], #1
 80020a0:	6823      	ldr	r3, [r4, #0]
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	e7e6      	b.n	8002074 <HAL_UART_Transmit+0x72>
          pData += 1U;
 80020a6:	3501      	adds	r5, #1
 80020a8:	e7e4      	b.n	8002074 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020aa:	9600      	str	r6, [sp, #0]
 80020ac:	463b      	mov	r3, r7
 80020ae:	2200      	movs	r2, #0
 80020b0:	2140      	movs	r1, #64	; 0x40
 80020b2:	4620      	mov	r0, r4
 80020b4:	f7ff ff40 	bl	8001f38 <UART_WaitOnFlagUntilTimeout>
 80020b8:	b988      	cbnz	r0, 80020de <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 80020ba:	2320      	movs	r3, #32
 80020bc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80020c0:	e000      	b.n	80020c4 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 80020c2:	2002      	movs	r0, #2
}
 80020c4:	b003      	add	sp, #12
 80020c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 80020ca:	2001      	movs	r0, #1
 80020cc:	e7fa      	b.n	80020c4 <HAL_UART_Transmit+0xc2>
 80020ce:	2001      	movs	r0, #1
 80020d0:	e7f8      	b.n	80020c4 <HAL_UART_Transmit+0xc2>
    __HAL_LOCK(huart);
 80020d2:	2002      	movs	r0, #2
 80020d4:	e7f6      	b.n	80020c4 <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 80020d6:	2003      	movs	r0, #3
 80020d8:	e7f4      	b.n	80020c4 <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 80020da:	2003      	movs	r0, #3
 80020dc:	e7f2      	b.n	80020c4 <HAL_UART_Transmit+0xc2>
      return HAL_TIMEOUT;
 80020de:	2003      	movs	r0, #3
 80020e0:	e7f0      	b.n	80020c4 <HAL_UART_Transmit+0xc2>
	...

080020e4 <Buzzer_Init>:
#include "buzzer.h"
#include "main.h"

#include "tim.h"

void Buzzer_Init (void) {
 80020e4:	b510      	push	{r4, lr}
	HAL_TIM_OC_Start(&htim2,TIM_CHANNEL_1);
 80020e6:	4c04      	ldr	r4, [pc, #16]	; (80020f8 <Buzzer_Init+0x14>)
 80020e8:	2100      	movs	r1, #0
 80020ea:	4620      	mov	r0, r4
 80020ec:	f7ff fdd4 	bl	8001c98 <HAL_TIM_OC_Start>
	HAL_TIM_PWM_Init(&htim2);
 80020f0:	4620      	mov	r0, r4
 80020f2:	f7ff fd01 	bl	8001af8 <HAL_TIM_PWM_Init>
}
 80020f6:	bd10      	pop	{r4, pc}
 80020f8:	20000f60 	.word	0x20000f60

080020fc <Buzzer_Set_Freq>:

void Buzzer_Set_Freq (uint16_t freq) {
 80020fc:	b510      	push	{r4, lr}
 80020fe:	4604      	mov	r4, r0
	TIM2->PSC = ((2 * HAL_RCC_GetPCLK1Freq()) / (2 * BUZZER_VOLUME_MAX * freq)) - 1;
 8002100:	f7ff fbe2 	bl	80018c8 <HAL_RCC_GetPCLK1Freq>
 8002104:	0040      	lsls	r0, r0, #1
 8002106:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800210a:	00a4      	lsls	r4, r4, #2
 800210c:	fbb0 f4f4 	udiv	r4, r0, r4
 8002110:	3c01      	subs	r4, #1
 8002112:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002116:	629c      	str	r4, [r3, #40]	; 0x28
}
 8002118:	bd10      	pop	{r4, pc}

0800211a <Buzzer_Set_Volume>:

void Buzzer_Set_Volume (uint16_t volume) {
	if (volume > BUZZER_VOLUME_MAX)
 800211a:	280a      	cmp	r0, #10
 800211c:	d900      	bls.n	8002120 <Buzzer_Set_Volume+0x6>
		volume = BUZZER_VOLUME_MAX;
 800211e:	200a      	movs	r0, #10
	TIM2->CCR1 = volume;
 8002120:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002124:	6358      	str	r0, [r3, #52]	; 0x34
}
 8002126:	4770      	bx	lr

08002128 <Buzzer_Play>:

void Buzzer_Play (uint32_t* melody, uint32_t* delays, uint16_t len) {
 8002128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800212a:	4607      	mov	r7, r0
 800212c:	460e      	mov	r6, r1
 800212e:	4615      	mov	r5, r2
	for(int i = 0; i < len; i++) {
 8002130:	2400      	movs	r4, #0
 8002132:	e00b      	b.n	800214c <Buzzer_Play+0x24>
	  	if (melody[i] != 0) {
	  		Buzzer_Set_Freq(melody[i]);
	  		Buzzer_Set_Volume(BUZZER_VOLUME_MAX);
	  		HAL_Delay(1920/delays[i]/2);
	  		Buzzer_Set_Volume(BUZZER_VOLUME_MUTE);
	  	} else HAL_Delay(1920/delays[i]/2);
 8002134:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8002138:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 800213c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002140:	f7fe fa1c 	bl	800057c <HAL_Delay>
	  	HAL_Delay(10);
 8002144:	200a      	movs	r0, #10
 8002146:	f7fe fa19 	bl	800057c <HAL_Delay>
	for(int i = 0; i < len; i++) {
 800214a:	3401      	adds	r4, #1
 800214c:	42a5      	cmp	r5, r4
 800214e:	dd15      	ble.n	800217c <Buzzer_Play+0x54>
	  	if (melody[i] != 0) {
 8002150:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 8002154:	2800      	cmp	r0, #0
 8002156:	d0ed      	beq.n	8002134 <Buzzer_Play+0xc>
	  		Buzzer_Set_Freq(melody[i]);
 8002158:	b280      	uxth	r0, r0
 800215a:	f7ff ffcf 	bl	80020fc <Buzzer_Set_Freq>
	  		Buzzer_Set_Volume(BUZZER_VOLUME_MAX);
 800215e:	200a      	movs	r0, #10
 8002160:	f7ff ffdb 	bl	800211a <Buzzer_Set_Volume>
	  		HAL_Delay(1920/delays[i]/2);
 8002164:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8002168:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 800216c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002170:	f7fe fa04 	bl	800057c <HAL_Delay>
	  		Buzzer_Set_Volume(BUZZER_VOLUME_MUTE);
 8002174:	2000      	movs	r0, #0
 8002176:	f7ff ffd0 	bl	800211a <Buzzer_Set_Volume>
 800217a:	e7e3      	b.n	8002144 <Buzzer_Play+0x1c>
	}
}
 800217c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002180 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002180:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002182:	2200      	movs	r2, #0
 8002184:	9200      	str	r2, [sp, #0]
 8002186:	4b15      	ldr	r3, [pc, #84]	; (80021dc <MX_GPIO_Init+0x5c>)
 8002188:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800218a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800218e:	6319      	str	r1, [r3, #48]	; 0x30
 8002190:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002192:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002196:	9100      	str	r1, [sp, #0]
 8002198:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	9201      	str	r2, [sp, #4]
 800219c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800219e:	f041 0101 	orr.w	r1, r1, #1
 80021a2:	6319      	str	r1, [r3, #48]	; 0x30
 80021a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021a6:	f001 0101 	and.w	r1, r1, #1
 80021aa:	9101      	str	r1, [sp, #4]
 80021ac:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ae:	9202      	str	r2, [sp, #8]
 80021b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021b2:	f041 0104 	orr.w	r1, r1, #4
 80021b6:	6319      	str	r1, [r3, #48]	; 0x30
 80021b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021ba:	f001 0104 	and.w	r1, r1, #4
 80021be:	9102      	str	r1, [sp, #8]
 80021c0:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c2:	9203      	str	r2, [sp, #12]
 80021c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021c6:	f042 0202 	orr.w	r2, r2, #2
 80021ca:	631a      	str	r2, [r3, #48]	; 0x30
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	9303      	str	r3, [sp, #12]
 80021d4:	9b03      	ldr	r3, [sp, #12]

}
 80021d6:	b004      	add	sp, #16
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40023800 	.word	0x40023800

080021e0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80021e0:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80021e2:	480b      	ldr	r0, [pc, #44]	; (8002210 <MX_I2C1_Init+0x30>)
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <MX_I2C1_Init+0x34>)
 80021e6:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <MX_I2C1_Init+0x38>)
 80021ea:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021ec:	2300      	movs	r3, #0
 80021ee:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021f0:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021f6:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021f8:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021fa:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021fc:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021fe:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002200:	f7fe fd62 	bl	8000cc8 <HAL_I2C_Init>
 8002204:	b900      	cbnz	r0, 8002208 <MX_I2C1_Init+0x28>
  {
    Error_Handler();
  }

}
 8002206:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002208:	f000 fa83 	bl	8002712 <Error_Handler>
}
 800220c:	e7fb      	b.n	8002206 <MX_I2C1_Init+0x26>
 800220e:	bf00      	nop
 8002210:	20000b04 	.word	0x20000b04
 8002214:	40005400 	.word	0x40005400
 8002218:	000186a0 	.word	0x000186a0

0800221c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800221c:	b530      	push	{r4, r5, lr}
 800221e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002220:	2300      	movs	r3, #0
 8002222:	9303      	str	r3, [sp, #12]
 8002224:	9304      	str	r3, [sp, #16]
 8002226:	9305      	str	r3, [sp, #20]
 8002228:	9306      	str	r3, [sp, #24]
 800222a:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 800222c:	6802      	ldr	r2, [r0, #0]
 800222e:	4b15      	ldr	r3, [pc, #84]	; (8002284 <HAL_I2C_MspInit+0x68>)
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002234:	b009      	add	sp, #36	; 0x24
 8002236:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002238:	2500      	movs	r5, #0
 800223a:	9501      	str	r5, [sp, #4]
 800223c:	4c12      	ldr	r4, [pc, #72]	; (8002288 <HAL_I2C_MspInit+0x6c>)
 800223e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002240:	f043 0302 	orr.w	r3, r3, #2
 8002244:	6323      	str	r3, [r4, #48]	; 0x30
 8002246:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002250:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002254:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002256:	2312      	movs	r3, #18
 8002258:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800225a:	2301      	movs	r3, #1
 800225c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225e:	2303      	movs	r3, #3
 8002260:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002262:	2304      	movs	r3, #4
 8002264:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002266:	a903      	add	r1, sp, #12
 8002268:	4808      	ldr	r0, [pc, #32]	; (800228c <HAL_I2C_MspInit+0x70>)
 800226a:	f7fe f9f9 	bl	8000660 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800226e:	9502      	str	r5, [sp, #8]
 8002270:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002272:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002276:	6423      	str	r3, [r4, #64]	; 0x40
 8002278:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800227a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227e:	9302      	str	r3, [sp, #8]
 8002280:	9b02      	ldr	r3, [sp, #8]
}
 8002282:	e7d7      	b.n	8002234 <HAL_I2C_MspInit+0x18>
 8002284:	40005400 	.word	0x40005400
 8002288:	40023800 	.word	0x40023800
 800228c:	40020400 	.word	0x40020400

08002290 <Set_Keyboard>:
#include "sdk_uart.h"
#include "usart.h"

#define KBRD_ADDR 0xE2

HAL_StatusTypeDef Set_Keyboard( void ) {
 8002290:	b510      	push	{r4, lr}
 8002292:	b082      	sub	sp, #8
	HAL_StatusTypeDef ret = HAL_OK;
	uint8_t buf;

	buf = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	f88d 3007 	strb.w	r3, [sp, #7]
	ret = PCA9538_Write_Register(KBRD_ADDR, POLARITY_INVERSION, &buf);
 800229a:	f10d 0207 	add.w	r2, sp, #7
 800229e:	2102      	movs	r1, #2
 80022a0:	20e2      	movs	r0, #226	; 0xe2
 80022a2:	f000 fba5 	bl	80029f0 <PCA9538_Write_Register>
	if( ret != HAL_OK ) {
 80022a6:	b968      	cbnz	r0, 80022c4 <Set_Keyboard+0x34>
		UART_Transmit((uint8_t*)"Error write polarity\n");
		goto exit;
	}

	buf = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	f88d 3007 	strb.w	r3, [sp, #7]
	ret = PCA9538_Write_Register(KBRD_ADDR, OUTPUT_PORT, &buf);
 80022ae:	f10d 0207 	add.w	r2, sp, #7
 80022b2:	2101      	movs	r1, #1
 80022b4:	20e2      	movs	r0, #226	; 0xe2
 80022b6:	f000 fb9b 	bl	80029f0 <PCA9538_Write_Register>
	if( ret != HAL_OK ) {
 80022ba:	4604      	mov	r4, r0
 80022bc:	b938      	cbnz	r0, 80022ce <Set_Keyboard+0x3e>
		UART_Transmit((uint8_t*)"Error write output\n");
	}

exit:
	return ret;
}
 80022be:	4620      	mov	r0, r4
 80022c0:	b002      	add	sp, #8
 80022c2:	bd10      	pop	{r4, pc}
 80022c4:	4604      	mov	r4, r0
		UART_Transmit((uint8_t*)"Error write polarity\n");
 80022c6:	4804      	ldr	r0, [pc, #16]	; (80022d8 <Set_Keyboard+0x48>)
 80022c8:	f000 fbac 	bl	8002a24 <UART_Transmit>
		goto exit;
 80022cc:	e7f7      	b.n	80022be <Set_Keyboard+0x2e>
		UART_Transmit((uint8_t*)"Error write output\n");
 80022ce:	4803      	ldr	r0, [pc, #12]	; (80022dc <Set_Keyboard+0x4c>)
 80022d0:	f000 fba8 	bl	8002a24 <UART_Transmit>
 80022d4:	e7f3      	b.n	80022be <Set_Keyboard+0x2e>
 80022d6:	bf00      	nop
 80022d8:	0800556c 	.word	0x0800556c
 80022dc:	08005584 	.word	0x08005584

080022e0 <Get_Key>:
	else Nkey = 0x00;

	return Nkey;
}

uint8_t Get_Key( uint8_t  Nrow ){
 80022e0:	b510      	push	{r4, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	4604      	mov	r4, r0
	uint8_t Nkey = 0x00;
	HAL_StatusTypeDef ret = HAL_OK;
	uint8_t buf;
	uint8_t kbd_in;

	ret = Set_Keyboard();
 80022e6:	f7ff ffd3 	bl	8002290 <Set_Keyboard>
	if( ret != HAL_OK ) {
 80022ea:	bb08      	cbnz	r0, 8002330 <Get_Key+0x50>
		UART_Transmit((uint8_t*)"Error write init\n");
	}

	buf = Nrow;
 80022ec:	f88d 4007 	strb.w	r4, [sp, #7]
	ret = PCA9538_Write_Register(KBRD_ADDR, CONFIG, &buf);
 80022f0:	f10d 0207 	add.w	r2, sp, #7
 80022f4:	2103      	movs	r1, #3
 80022f6:	20e2      	movs	r0, #226	; 0xe2
 80022f8:	f000 fb7a 	bl	80029f0 <PCA9538_Write_Register>
	if( ret != HAL_OK ) {
 80022fc:	b9e0      	cbnz	r0, 8002338 <Get_Key+0x58>
		UART_Transmit((uint8_t*)"Error write config\n");
	}

	ret = PCA9538_Read_Inputs(KBRD_ADDR, &buf);
 80022fe:	f10d 0107 	add.w	r1, sp, #7
 8002302:	20e2      	movs	r0, #226	; 0xe2
 8002304:	f000 fb88 	bl	8002a18 <PCA9538_Read_Inputs>
	if( ret != HAL_OK ) {
 8002308:	b9d0      	cbnz	r0, 8002340 <Get_Key+0x60>
		UART_Transmit((uint8_t*)"Read error\n");
	}

	kbd_in = buf & 0x70;
 800230a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800230e:	f003 0070 	and.w	r0, r3, #112	; 0x70

	// 7 8 9
	// 4 5 6
	// 1 2 3
	// 0 r s
	if( kbd_in != 0x70) { //redefined as normal calculator
 8002312:	2870      	cmp	r0, #112	; 0x70
 8002314:	d045      	beq.n	80023a2 <Get_Key+0xc2>
		if( !(kbd_in & 0x10) ) { //left
 8002316:	f013 0110 	ands.w	r1, r3, #16
 800231a:	d116      	bne.n	800234a <Get_Key+0x6a>
			switch (Nrow) {
 800231c:	f1a4 02f7 	sub.w	r2, r4, #247	; 0xf7
 8002320:	2a07      	cmp	r2, #7
 8002322:	d812      	bhi.n	800234a <Get_Key+0x6a>
 8002324:	e8df f002 	tbb	[pc, r2]
 8002328:	11111120 	.word	0x11111120
 800232c:	2210111e 	.word	0x2210111e
		UART_Transmit((uint8_t*)"Error write init\n");
 8002330:	481e      	ldr	r0, [pc, #120]	; (80023ac <Get_Key+0xcc>)
 8002332:	f000 fb77 	bl	8002a24 <UART_Transmit>
 8002336:	e7d9      	b.n	80022ec <Get_Key+0xc>
		UART_Transmit((uint8_t*)"Error write config\n");
 8002338:	481d      	ldr	r0, [pc, #116]	; (80023b0 <Get_Key+0xd0>)
 800233a:	f000 fb73 	bl	8002a24 <UART_Transmit>
 800233e:	e7de      	b.n	80022fe <Get_Key+0x1e>
		UART_Transmit((uint8_t*)"Read error\n");
 8002340:	481c      	ldr	r0, [pc, #112]	; (80023b4 <Get_Key+0xd4>)
 8002342:	f000 fb6f 	bl	8002a24 <UART_Transmit>
 8002346:	e7e0      	b.n	800230a <Get_Key+0x2a>
				case ROW1:
					Nkey = 0x07;
					break;
				case ROW2:
					Nkey = 0x04;
 8002348:	2004      	movs	r0, #4
				case ROW4:
					Nkey = 0x00;
					break;
			}
		}
		if( !(kbd_in & 0x20) ) { //center
 800234a:	f013 0f20 	tst.w	r3, #32
 800234e:	d110      	bne.n	8002372 <Get_Key+0x92>
			switch (Nrow) {
 8002350:	f1a4 02f7 	sub.w	r2, r4, #247	; 0xf7
 8002354:	2a07      	cmp	r2, #7
 8002356:	d80c      	bhi.n	8002372 <Get_Key+0x92>
 8002358:	e8df f002 	tbb	[pc, r2]
 800235c:	0b0b0b19 	.word	0x0b0b0b19
 8002360:	1b0a0b17 	.word	0x1b0a0b17
					Nkey = 0x01;
 8002364:	2001      	movs	r0, #1
					break;
 8002366:	e7f0      	b.n	800234a <Get_Key+0x6a>
					Nkey = 0x00;
 8002368:	4608      	mov	r0, r1
					break;
 800236a:	e7ee      	b.n	800234a <Get_Key+0x6a>
					Nkey = 0x07;
 800236c:	2007      	movs	r0, #7
 800236e:	e7ec      	b.n	800234a <Get_Key+0x6a>
				case ROW1:
					Nkey = 0x08;
					break;
				case ROW2:
					Nkey = 0x05;
 8002370:	2005      	movs	r0, #5
				case ROW4:
					Nkey = 0x0B; // reset(pause)
					break;
			}
		}
		if( !(kbd_in & 0x40) ) { //right
 8002372:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002376:	d115      	bne.n	80023a4 <Get_Key+0xc4>
			switch (Nrow) {
 8002378:	3cf7      	subs	r4, #247	; 0xf7
 800237a:	2c07      	cmp	r4, #7
 800237c:	d812      	bhi.n	80023a4 <Get_Key+0xc4>
 800237e:	e8df f004 	tbb	[pc, r4]
 8002382:	110e      	.short	0x110e
 8002384:	110c1111 	.word	0x110c1111
 8002388:	130a      	.short	0x130a
					Nkey = 0x02;
 800238a:	2002      	movs	r0, #2
					break;
 800238c:	e7f1      	b.n	8002372 <Get_Key+0x92>
					Nkey = 0x0B; // reset(pause)
 800238e:	200b      	movs	r0, #11
					break;
 8002390:	e7ef      	b.n	8002372 <Get_Key+0x92>
					Nkey = 0x08;
 8002392:	2008      	movs	r0, #8
 8002394:	e7ed      	b.n	8002372 <Get_Key+0x92>
				case ROW1:
					Nkey = 0x09;
					break;
				case ROW2:
					Nkey = 0x06;
 8002396:	2006      	movs	r0, #6
					break;
 8002398:	e004      	b.n	80023a4 <Get_Key+0xc4>
				case ROW3:
					Nkey = 0x03;
 800239a:	2003      	movs	r0, #3
					break;
 800239c:	e002      	b.n	80023a4 <Get_Key+0xc4>
				case ROW4:
					Nkey = 0x0C; // start (unpause)
 800239e:	200c      	movs	r0, #12
					break;
 80023a0:	e000      	b.n	80023a4 <Get_Key+0xc4>
			}
		}
	}
	else Nkey = 0x0D;
 80023a2:	200d      	movs	r0, #13

	return Nkey;
}
 80023a4:	b002      	add	sp, #8
 80023a6:	bd10      	pop	{r4, pc}
					Nkey = 0x09;
 80023a8:	2009      	movs	r0, #9
 80023aa:	e7fb      	b.n	80023a4 <Get_Key+0xc4>
 80023ac:	08005598 	.word	0x08005598
 80023b0:	080055ac 	.word	0x080055ac
 80023b4:	080055c0 	.word	0x080055c0

080023b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023b8:	b530      	push	{r4, r5, lr}
 80023ba:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023bc:	2230      	movs	r2, #48	; 0x30
 80023be:	2100      	movs	r1, #0
 80023c0:	a808      	add	r0, sp, #32
 80023c2:	f000 fca9 	bl	8002d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023c6:	2400      	movs	r4, #0
 80023c8:	9403      	str	r4, [sp, #12]
 80023ca:	9404      	str	r4, [sp, #16]
 80023cc:	9405      	str	r4, [sp, #20]
 80023ce:	9406      	str	r4, [sp, #24]
 80023d0:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023d2:	9401      	str	r4, [sp, #4]
 80023d4:	4b1c      	ldr	r3, [pc, #112]	; (8002448 <SystemClock_Config+0x90>)
 80023d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023e8:	9402      	str	r4, [sp, #8]
 80023ea:	4b18      	ldr	r3, [pc, #96]	; (800244c <SystemClock_Config+0x94>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fa:	9302      	str	r3, [sp, #8]
 80023fc:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023fe:	2301      	movs	r3, #1
 8002400:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002402:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002406:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002408:	2502      	movs	r5, #2
 800240a:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800240c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002410:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002412:	2319      	movs	r3, #25
 8002414:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002416:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800241a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800241c:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800241e:	2304      	movs	r3, #4
 8002420:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002422:	a808      	add	r0, sp, #32
 8002424:	f7fe ff52 	bl	80012cc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002428:	230f      	movs	r3, #15
 800242a:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800242c:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800242e:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002430:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002434:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002436:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800243a:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800243c:	2105      	movs	r1, #5
 800243e:	a803      	add	r0, sp, #12
 8002440:	f7ff f98c 	bl	800175c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8002444:	b015      	add	sp, #84	; 0x54
 8002446:	bd30      	pop	{r4, r5, pc}
 8002448:	40023800 	.word	0x40023800
 800244c:	40007000 	.word	0x40007000

08002450 <OLED_TIMER>:
	      HAL_Delay(25);
	    }
	  }
}

void OLED_TIMER(uint8_t OLED_Keys[4]){
 8002450:	b538      	push	{r3, r4, r5, lr}
 8002452:	4605      	mov	r5, r0
	oled_SetCursor(20, 20); //change 0 to i
 8002454:	2114      	movs	r1, #20
 8002456:	4608      	mov	r0, r1
 8002458:	f000 fab0 	bl	80029bc <oled_SetCursor>
	for (int i = 3; i >= 0; i--) {
 800245c:	2403      	movs	r4, #3
 800245e:	e006      	b.n	800246e <OLED_TIMER+0x1e>
			if (i == 1){
				//0x3A - ':'
				oled_WriteChar(0x3A, Font_11x18, White); //change font
			}
			oled_WriteChar(OLED_Keys[i], Font_11x18, White);
 8002460:	4a0a      	ldr	r2, [pc, #40]	; (800248c <OLED_TIMER+0x3c>)
 8002462:	2301      	movs	r3, #1
 8002464:	ca06      	ldmia	r2, {r1, r2}
 8002466:	5d28      	ldrb	r0, [r5, r4]
 8002468:	f000 fa36 	bl	80028d8 <oled_WriteChar>
	for (int i = 3; i >= 0; i--) {
 800246c:	3c01      	subs	r4, #1
 800246e:	2c00      	cmp	r4, #0
 8002470:	db08      	blt.n	8002484 <OLED_TIMER+0x34>
			if (i == 1){
 8002472:	2c01      	cmp	r4, #1
 8002474:	d1f4      	bne.n	8002460 <OLED_TIMER+0x10>
				oled_WriteChar(0x3A, Font_11x18, White); //change font
 8002476:	4a05      	ldr	r2, [pc, #20]	; (800248c <OLED_TIMER+0x3c>)
 8002478:	2301      	movs	r3, #1
 800247a:	ca06      	ldmia	r2, {r1, r2}
 800247c:	203a      	movs	r0, #58	; 0x3a
 800247e:	f000 fa2b 	bl	80028d8 <oled_WriteChar>
 8002482:	e7ed      	b.n	8002460 <OLED_TIMER+0x10>
		}
		oled_UpdateScreen();
 8002484:	f000 f96c 	bl	8002760 <oled_UpdateScreen>
}
 8002488:	bd38      	pop	{r3, r4, r5, pc}
 800248a:	bf00      	nop
 800248c:	20000010 	.word	0x20000010

08002490 <oled_Reset>:
			oled_WriteChar(OLED_Keys[j+3*i], Font_7x10, White);
		}
	}
	oled_UpdateScreen();
}
void oled_Reset( void ) {
 8002490:	b508      	push	{r3, lr}
	oled_Fill(Black);
 8002492:	2000      	movs	r0, #0
 8002494:	f000 f954 	bl	8002740 <oled_Fill>
	oled_SetCursor(0, 0);
 8002498:	2100      	movs	r1, #0
 800249a:	4608      	mov	r0, r1
 800249c:	f000 fa8e 	bl	80029bc <oled_SetCursor>
	oled_UpdateScreen();
 80024a0:	f000 f95e 	bl	8002760 <oled_UpdateScreen>
}
 80024a4:	bd08      	pop	{r3, pc}
	...

080024a8 <TIMER_NOW>:
void TIMER_NOW( void ){
 80024a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024ac:	b083      	sub	sp, #12
 80024ae:	2600      	movs	r6, #0
	uint8_t Row[4] = {ROW4, ROW3, ROW2, ROW1}, Key, OldKey, OLED_Keys[4] = {0x30,0x30,0x30,0x30};
 80024b0:	4b86      	ldr	r3, [pc, #536]	; (80026cc <TIMER_NOW+0x224>)
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	f04f 3330 	mov.w	r3, #808464432	; 0x30303030
 80024b8:	9300      	str	r3, [sp, #0]
	  oled_Reset();
 80024ba:	f7ff ffe9 	bl	8002490 <oled_Reset>
	  oled_WriteString("Timer: ", Font_11x18, White);
 80024be:	4a84      	ldr	r2, [pc, #528]	; (80026d0 <TIMER_NOW+0x228>)
 80024c0:	2301      	movs	r3, #1
 80024c2:	ca06      	ldmia	r2, {r1, r2}
 80024c4:	4883      	ldr	r0, [pc, #524]	; (80026d4 <TIMER_NOW+0x22c>)
 80024c6:	f000 fa61 	bl	800298c <oled_WriteString>
	  OLED_TIMER(OLED_Keys);
 80024ca:	4668      	mov	r0, sp
 80024cc:	f7ff ffc0 	bl	8002450 <OLED_TIMER>
	  oled_UpdateScreen();
 80024d0:	f000 f946 	bl	8002760 <oled_UpdateScreen>
	  uint32_t time_s = 0;
 80024d4:	46b0      	mov	r8, r6
	  int count = 0, isStop = 0;
 80024d6:	4637      	mov	r7, r6
	  uint8_t pos = 0;
 80024d8:	46b3      	mov	fp, r6
	  uint8_t isStarted = 0, isPaused = 0;
 80024da:	46b2      	mov	sl, r6
 80024dc:	46b1      	mov	r9, r6
 80024de:	e000      	b.n	80024e2 <TIMER_NOW+0x3a>
	      Key = Get_Key( Row[i] );
 80024e0:	4626      	mov	r6, r4
	    if (isStarted){
 80024e2:	f1b9 0f00 	cmp.w	r9, #0
 80024e6:	d101      	bne.n	80024ec <TIMER_NOW+0x44>
	    for ( int i = 0; i < 4; i++ ){
 80024e8:	2500      	movs	r5, #0
 80024ea:	e0b5      	b.n	8002658 <TIMER_NOW+0x1b0>
	    	if (time_s >= 3600) {
 80024ec:	f5b8 6f61 	cmp.w	r8, #3600	; 0xe10
 80024f0:	d30a      	bcc.n	8002508 <TIMER_NOW+0x60>
	    		time_s = 3600;
 80024f2:	f44f 6861 	mov.w	r8, #3600	; 0xe10
 80024f6:	e007      	b.n	8002508 <TIMER_NOW+0x60>
	          Key = Get_Key( Row[0] );
 80024f8:	20f7      	movs	r0, #247	; 0xf7
 80024fa:	f7ff fef1 	bl	80022e0 <Get_Key>
	          if (Key == 0x0C && OldKey != Key) {
 80024fe:	280c      	cmp	r0, #12
 8002500:	d04a      	beq.n	8002598 <TIMER_NOW+0xf0>
	          if (Key == 0x0B) {
 8002502:	280b      	cmp	r0, #11
 8002504:	d065      	beq.n	80025d2 <TIMER_NOW+0x12a>
	          Key = Get_Key( Row[0] );
 8002506:	4606      	mov	r6, r0
	      while (time_s != 0) {
 8002508:	f1b8 0f00 	cmp.w	r8, #0
 800250c:	d04f      	beq.n	80025ae <TIMER_NOW+0x106>
	        HAL_Delay(25);
 800250e:	2019      	movs	r0, #25
 8002510:	f7fe f834 	bl	800057c <HAL_Delay>
	        count++;
 8002514:	3701      	adds	r7, #1
	        if (!isPaused && count == 1000 / 28) {
 8002516:	f1ba 0f00 	cmp.w	sl, #0
 800251a:	d1ed      	bne.n	80024f8 <TIMER_NOW+0x50>
 800251c:	2f23      	cmp	r7, #35	; 0x23
 800251e:	d1eb      	bne.n	80024f8 <TIMER_NOW+0x50>
	          time_s--;
 8002520:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	          ten_min = time_s / 600;
 8002524:	496c      	ldr	r1, [pc, #432]	; (80026d8 <TIMER_NOW+0x230>)
 8002526:	fba1 3108 	umull	r3, r1, r1, r8
 800252a:	f3c1 1187 	ubfx	r1, r1, #6, #8
	          min = (time_s - 600 * ten_min) / 60;
 800252e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002532:	fb03 8311 	mls	r3, r3, r1, r8
 8002536:	4869      	ldr	r0, [pc, #420]	; (80026dc <TIMER_NOW+0x234>)
 8002538:	fba0 2003 	umull	r2, r0, r0, r3
 800253c:	f3c0 1047 	ubfx	r0, r0, #5, #8
	          ten_sec = (time_s - 600 * ten_min - 60 * min) / 10;
 8002540:	ebc0 1200 	rsb	r2, r0, r0, lsl #4
 8002544:	eba3 0282 	sub.w	r2, r3, r2, lsl #2
 8002548:	4b65      	ldr	r3, [pc, #404]	; (80026e0 <TIMER_NOW+0x238>)
 800254a:	fba3 3202 	umull	r3, r2, r3, r2
 800254e:	f3c2 02c7 	ubfx	r2, r2, #3, #8
	          sec = (time_s - 600 * ten_min - 60 * min - 10 * ten_sec);
 8002552:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002556:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800255a:	eba8 03c3 	sub.w	r3, r8, r3, lsl #3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	ebc0 1400 	rsb	r4, r0, r0, lsl #4
 8002564:	eba3 0384 	sub.w	r3, r3, r4, lsl #2
 8002568:	b2db      	uxtb	r3, r3
 800256a:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 800256e:	0064      	lsls	r4, r4, #1
 8002570:	b2e4      	uxtb	r4, r4
 8002572:	1b1b      	subs	r3, r3, r4
 8002574:	b2db      	uxtb	r3, r3
	          OLED_Keys[0] = 48 + sec;
 8002576:	3330      	adds	r3, #48	; 0x30
 8002578:	f88d 3000 	strb.w	r3, [sp]
	          OLED_Keys[1] = 48 + ten_sec;
 800257c:	3230      	adds	r2, #48	; 0x30
 800257e:	f88d 2001 	strb.w	r2, [sp, #1]
	          OLED_Keys[2] = 48 + min;
 8002582:	3030      	adds	r0, #48	; 0x30
 8002584:	f88d 0002 	strb.w	r0, [sp, #2]
	          OLED_Keys[3] = 48 + ten_min;
 8002588:	3130      	adds	r1, #48	; 0x30
 800258a:	f88d 1003 	strb.w	r1, [sp, #3]
	          OLED_TIMER(OLED_Keys);
 800258e:	4668      	mov	r0, sp
 8002590:	f7ff ff5e 	bl	8002450 <OLED_TIMER>
	          count = 0;
 8002594:	2700      	movs	r7, #0
 8002596:	e7af      	b.n	80024f8 <TIMER_NOW+0x50>
	          if (Key == 0x0C && OldKey != Key) {
 8002598:	4286      	cmp	r6, r0
 800259a:	d0b2      	beq.n	8002502 <TIMER_NOW+0x5a>
	            if (isPaused) {
 800259c:	f1ba 0f00 	cmp.w	sl, #0
 80025a0:	d002      	beq.n	80025a8 <TIMER_NOW+0x100>
	            count = 0;
 80025a2:	2700      	movs	r7, #0
	              isPaused = 0;
 80025a4:	46ba      	mov	sl, r7
 80025a6:	e7ac      	b.n	8002502 <TIMER_NOW+0x5a>
	              isPaused = 1;
 80025a8:	46ca      	mov	sl, r9
	            count = 0;
 80025aa:	2700      	movs	r7, #0
 80025ac:	e7a9      	b.n	8002502 <TIMER_NOW+0x5a>
 80025ae:	2400      	movs	r4, #0
	      OLED_Keys[0] = 0x30;
 80025b0:	2330      	movs	r3, #48	; 0x30
 80025b2:	f88d 3000 	strb.w	r3, [sp]
	      OLED_Keys[1] = 0x30;
 80025b6:	f88d 3001 	strb.w	r3, [sp, #1]
	      OLED_Keys[2] = 0x30;
 80025ba:	f88d 3002 	strb.w	r3, [sp, #2]
	      OLED_Keys[3] = 0x30;
 80025be:	f88d 3003 	strb.w	r3, [sp, #3]
	      OLED_TIMER(OLED_Keys);
 80025c2:	4668      	mov	r0, sp
 80025c4:	f7ff ff44 	bl	8002450 <OLED_TIMER>
	      if (!isStop) {
 80025c8:	b134      	cbz	r4, 80025d8 <TIMER_NOW+0x130>
	      pos = 0;
 80025ca:	f04f 0b00 	mov.w	fp, #0
	      isStarted = 0;
 80025ce:	46d9      	mov	r9, fp
 80025d0:	e78a      	b.n	80024e8 <TIMER_NOW+0x40>
	          Key = Get_Key( Row[0] );
 80025d2:	4606      	mov	r6, r0
	        	  isStop = 1;
 80025d4:	2401      	movs	r4, #1
 80025d6:	e7eb      	b.n	80025b0 <TIMER_NOW+0x108>
	    	  Buzzer_Play(megalovania_melody, megalovania_delays, sizeof(megalovania_melody) / sizeof(uint32_t));
 80025d8:	4942      	ldr	r1, [pc, #264]	; (80026e4 <TIMER_NOW+0x23c>)
 80025da:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80025de:	f501 60ac 	add.w	r0, r1, #1376	; 0x560
 80025e2:	f7ff fda1 	bl	8002128 <Buzzer_Play>
	      pos = 0;
 80025e6:	f04f 0b00 	mov.w	fp, #0
	      isStarted = 0;
 80025ea:	46d9      	mov	r9, fp
 80025ec:	e77c      	b.n	80024e8 <TIMER_NOW+0x40>
	          }else  if (pos == 1) {
 80025ee:	f1bb 0f01 	cmp.w	fp, #1
 80025f2:	d015      	beq.n	8002620 <TIMER_NOW+0x178>
	          }else if (pos == 2) {
 80025f4:	f1bb 0f02 	cmp.w	fp, #2
 80025f8:	d01b      	beq.n	8002632 <TIMER_NOW+0x18a>
	          } else if (pos == 3){
 80025fa:	f1bb 0f03 	cmp.w	fp, #3
 80025fe:	d153      	bne.n	80026a8 <TIMER_NOW+0x200>
	        	  if (Key > 5) {
 8002600:	2805      	cmp	r0, #5
 8002602:	d907      	bls.n	8002614 <TIMER_NOW+0x16c>
	        		  OLED_Keys[pos] = 0x30 + Key;
 8002604:	f10b 0308 	add.w	r3, fp, #8
 8002608:	eb0d 0103 	add.w	r1, sp, r3
 800260c:	2335      	movs	r3, #53	; 0x35
 800260e:	f801 3c08 	strb.w	r3, [r1, #-8]
	        		  Key = 5;
 8002612:	2405      	movs	r4, #5
	            time_s +=600* Key;
 8002614:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002618:	fb03 8804 	mla	r8, r3, r4, r8
	            pos = 0;
 800261c:	46cb      	mov	fp, r9
 800261e:	e043      	b.n	80026a8 <TIMER_NOW+0x200>
	            time_s += 10*Key;
 8002620:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8002624:	eb08 0843 	add.w	r8, r8, r3, lsl #1
	              pos++;
 8002628:	f10b 0b01 	add.w	fp, fp, #1
 800262c:	fa5f fb8b 	uxtb.w	fp, fp
 8002630:	e03a      	b.n	80026a8 <TIMER_NOW+0x200>
	            time_s += 60*Key;
 8002632:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
 8002636:	eb08 0883 	add.w	r8, r8, r3, lsl #2
	              pos++;
 800263a:	f10b 0b01 	add.w	fp, fp, #1
 800263e:	fa5f fb8b 	uxtb.w	fp, fp
 8002642:	e031      	b.n	80026a8 <TIMER_NOW+0x200>
	        } else if (Key == 0x0B){ // stop (reset)
 8002644:	2c0b      	cmp	r4, #11
 8002646:	f43f af4b 	beq.w	80024e0 <TIMER_NOW+0x38>
	        } else if (Key == 0x0C){ // start (pause / unpause)
 800264a:	2c0c      	cmp	r4, #12
 800264c:	d030      	beq.n	80026b0 <TIMER_NOW+0x208>
	      HAL_Delay(25);
 800264e:	2019      	movs	r0, #25
 8002650:	f7fd ff94 	bl	800057c <HAL_Delay>
	    for ( int i = 0; i < 4; i++ ){
 8002654:	3501      	adds	r5, #1
 8002656:	4626      	mov	r6, r4
 8002658:	2d03      	cmp	r5, #3
 800265a:	f73f af42 	bgt.w	80024e2 <TIMER_NOW+0x3a>
	      Key = Get_Key( Row[i] );
 800265e:	f105 0308 	add.w	r3, r5, #8
 8002662:	446b      	add	r3, sp
 8002664:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 8002668:	f7ff fe3a 	bl	80022e0 <Get_Key>
 800266c:	4604      	mov	r4, r0
	      if (Key != OldKey){
 800266e:	4286      	cmp	r6, r0
 8002670:	d0ed      	beq.n	800264e <TIMER_NOW+0x1a6>
	        if (Key >= 0x00 && Key <= 0x0A && !isStarted){ //redefined as normal calculator
 8002672:	280a      	cmp	r0, #10
 8002674:	d8e6      	bhi.n	8002644 <TIMER_NOW+0x19c>
 8002676:	f1b9 0f00 	cmp.w	r9, #0
 800267a:	d1e3      	bne.n	8002644 <TIMER_NOW+0x19c>
	          OLED_Keys[pos] = 0x30 + Key;
 800267c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8002680:	f10b 0208 	add.w	r2, fp, #8
 8002684:	446a      	add	r2, sp
 8002686:	f802 3c08 	strb.w	r3, [r2, #-8]
	          if (pos == 0) {
 800268a:	f1bb 0f00 	cmp.w	fp, #0
 800268e:	d1ae      	bne.n	80025ee <TIMER_NOW+0x146>
	              OLED_Keys[1] = 0x30;
 8002690:	2330      	movs	r3, #48	; 0x30
 8002692:	f88d 3001 	strb.w	r3, [sp, #1]
	              OLED_Keys[2] = 0x30;
 8002696:	f88d 3002 	strb.w	r3, [sp, #2]
	              OLED_Keys[3] = 0x30;
 800269a:	f88d 3003 	strb.w	r3, [sp, #3]
	            time_s += Key;
 800269e:	4680      	mov	r8, r0
	            pos++;
 80026a0:	f10b 0b01 	add.w	fp, fp, #1
 80026a4:	fa5f fb8b 	uxtb.w	fp, fp
	          OLED_TIMER(OLED_Keys);
 80026a8:	4668      	mov	r0, sp
 80026aa:	f7ff fed1 	bl	8002450 <OLED_TIMER>
 80026ae:	e7ce      	b.n	800264e <TIMER_NOW+0x1a6>
	          if (!isStarted){
 80026b0:	f1b9 0f00 	cmp.w	r9, #0
 80026b4:	d005      	beq.n	80026c2 <TIMER_NOW+0x21a>
	            if (isPaused){
 80026b6:	f1ba 0f00 	cmp.w	sl, #0
 80026ba:	d005      	beq.n	80026c8 <TIMER_NOW+0x220>
	              isPaused = 0; // unpause
 80026bc:	f04f 0a00 	mov.w	sl, #0
 80026c0:	e7c5      	b.n	800264e <TIMER_NOW+0x1a6>
	            isStarted  = 1;
 80026c2:	f04f 0901 	mov.w	r9, #1
 80026c6:	e7c2      	b.n	800264e <TIMER_NOW+0x1a6>
	              isPaused = 1; // pause
 80026c8:	46ca      	mov	sl, r9
 80026ca:	e7c0      	b.n	800264e <TIMER_NOW+0x1a6>
 80026cc:	fefdfbf7 	.word	0xfefdfbf7
 80026d0:	20000010 	.word	0x20000010
 80026d4:	080055cc 	.word	0x080055cc
 80026d8:	1b4e81b5 	.word	0x1b4e81b5
 80026dc:	88888889 	.word	0x88888889
 80026e0:	cccccccd 	.word	0xcccccccd
 80026e4:	20000020 	.word	0x20000020

080026e8 <main>:
{
 80026e8:	b508      	push	{r3, lr}
  HAL_Init();
 80026ea:	f7fd ff1b 	bl	8000524 <HAL_Init>
  SystemClock_Config();
 80026ee:	f7ff fe63 	bl	80023b8 <SystemClock_Config>
  MX_GPIO_Init();
 80026f2:	f7ff fd45 	bl	8002180 <MX_GPIO_Init>
  MX_I2C1_Init();
 80026f6:	f7ff fd73 	bl	80021e0 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 80026fa:	f000 fa6d 	bl	8002bd8 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 80026fe:	f000 fa2d 	bl	8002b5c <MX_TIM2_Init>
  oled_Init();
 8002702:	f000 f855 	bl	80027b0 <oled_Init>
  MX_TIM2_Init();
 8002706:	f000 fa29 	bl	8002b5c <MX_TIM2_Init>
  Buzzer_Init();
 800270a:	f7ff fceb 	bl	80020e4 <Buzzer_Init>
	  TIMER_NOW();
 800270e:	f7ff fecb 	bl	80024a8 <TIMER_NOW>

08002712 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002712:	4770      	bx	lr

08002714 <oled_WriteCommand>:
static uint8_t OLED_Buffer[1024];

static OLED_t OLED;


static void oled_WriteCommand(uint8_t command) {
 8002714:	b500      	push	{lr}
 8002716:	b087      	sub	sp, #28
 8002718:	f88d 0017 	strb.w	r0, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x00,1,&command,1,10);
 800271c:	230a      	movs	r3, #10
 800271e:	9302      	str	r3, [sp, #8]
 8002720:	2301      	movs	r3, #1
 8002722:	9301      	str	r3, [sp, #4]
 8002724:	f10d 0217 	add.w	r2, sp, #23
 8002728:	9200      	str	r2, [sp, #0]
 800272a:	2200      	movs	r2, #0
 800272c:	2178      	movs	r1, #120	; 0x78
 800272e:	4803      	ldr	r0, [pc, #12]	; (800273c <oled_WriteCommand+0x28>)
 8002730:	f7fe fba8 	bl	8000e84 <HAL_I2C_Mem_Write>
}
 8002734:	b007      	add	sp, #28
 8002736:	f85d fb04 	ldr.w	pc, [sp], #4
 800273a:	bf00      	nop
 800273c:	20000b04 	.word	0x20000b04

08002740 <oled_Fill>:
}

void oled_Fill(OLED_COLOR color) {
	uint32_t i;

	for(i = 0; i < sizeof(OLED_Buffer); i++) {
 8002740:	2300      	movs	r3, #0
 8002742:	e003      	b.n	800274c <oled_Fill+0xc>
		OLED_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002744:	21ff      	movs	r1, #255	; 0xff
 8002746:	4a05      	ldr	r2, [pc, #20]	; (800275c <oled_Fill+0x1c>)
 8002748:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < sizeof(OLED_Buffer); i++) {
 800274a:	3301      	adds	r3, #1
 800274c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002750:	d203      	bcs.n	800275a <oled_Fill+0x1a>
		OLED_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002752:	2800      	cmp	r0, #0
 8002754:	d1f6      	bne.n	8002744 <oled_Fill+0x4>
 8002756:	4601      	mov	r1, r0
 8002758:	e7f5      	b.n	8002746 <oled_Fill+0x6>
	}
}
 800275a:	4770      	bx	lr
 800275c:	20000b58 	.word	0x20000b58

08002760 <oled_UpdateScreen>:


void oled_UpdateScreen(void) {
 8002760:	b510      	push	{r4, lr}
 8002762:	b084      	sub	sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8002764:	2400      	movs	r4, #0
 8002766:	e01a      	b.n	800279e <oled_UpdateScreen+0x3e>
		oled_WriteCommand(0xB0 + i);
 8002768:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 800276c:	b2c0      	uxtb	r0, r0
 800276e:	f7ff ffd1 	bl	8002714 <oled_WriteCommand>
		oled_WriteCommand(0x00);
 8002772:	2000      	movs	r0, #0
 8002774:	f7ff ffce 	bl	8002714 <oled_WriteCommand>
		oled_WriteCommand(0x10);
 8002778:	2010      	movs	r0, #16
 800277a:	f7ff ffcb 	bl	8002714 <oled_WriteCommand>

		HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x40,1,&OLED_Buffer[OLED_WIDTH * i],OLED_WIDTH,100);
 800277e:	2364      	movs	r3, #100	; 0x64
 8002780:	9302      	str	r3, [sp, #8]
 8002782:	2380      	movs	r3, #128	; 0x80
 8002784:	9301      	str	r3, [sp, #4]
 8002786:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <oled_UpdateScreen+0x48>)
 8002788:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	2301      	movs	r3, #1
 8002790:	2240      	movs	r2, #64	; 0x40
 8002792:	2178      	movs	r1, #120	; 0x78
 8002794:	4805      	ldr	r0, [pc, #20]	; (80027ac <oled_UpdateScreen+0x4c>)
 8002796:	f7fe fb75 	bl	8000e84 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 800279a:	3401      	adds	r4, #1
 800279c:	b2e4      	uxtb	r4, r4
 800279e:	2c07      	cmp	r4, #7
 80027a0:	d9e2      	bls.n	8002768 <oled_UpdateScreen+0x8>
	}
}
 80027a2:	b004      	add	sp, #16
 80027a4:	bd10      	pop	{r4, pc}
 80027a6:	bf00      	nop
 80027a8:	20000b58 	.word	0x20000b58
 80027ac:	20000b04 	.word	0x20000b04

080027b0 <oled_Init>:
uint8_t oled_Init(void) {
 80027b0:	b508      	push	{r3, lr}
	HAL_Delay(100);
 80027b2:	2064      	movs	r0, #100	; 0x64
 80027b4:	f7fd fee2 	bl	800057c <HAL_Delay>
	oled_WriteCommand(0xAE);
 80027b8:	20ae      	movs	r0, #174	; 0xae
 80027ba:	f7ff ffab 	bl	8002714 <oled_WriteCommand>
	oled_WriteCommand(0x20);
 80027be:	2020      	movs	r0, #32
 80027c0:	f7ff ffa8 	bl	8002714 <oled_WriteCommand>
	oled_WriteCommand(0x10);
 80027c4:	2010      	movs	r0, #16
 80027c6:	f7ff ffa5 	bl	8002714 <oled_WriteCommand>
	oled_WriteCommand(0xB0);
 80027ca:	20b0      	movs	r0, #176	; 0xb0
 80027cc:	f7ff ffa2 	bl	8002714 <oled_WriteCommand>
	oled_WriteCommand(0xC8);
 80027d0:	20c8      	movs	r0, #200	; 0xc8
 80027d2:	f7ff ff9f 	bl	8002714 <oled_WriteCommand>
	oled_WriteCommand(0x00);
 80027d6:	2000      	movs	r0, #0
 80027d8:	f7ff ff9c 	bl	8002714 <oled_WriteCommand>
	oled_WriteCommand(0x10);
 80027dc:	2010      	movs	r0, #16
 80027de:	f7ff ff99 	bl	8002714 <oled_WriteCommand>
	oled_WriteCommand(0x40);
 80027e2:	2040      	movs	r0, #64	; 0x40
 80027e4:	f7ff ff96 	bl	8002714 <oled_WriteCommand>
	oled_WriteCommand(0x81);
 80027e8:	2081      	movs	r0, #129	; 0x81
 80027ea:	f7ff ff93 	bl	8002714 <oled_WriteCommand>
	oled_WriteCommand(0xFF);
 80027ee:	20ff      	movs	r0, #255	; 0xff
 80027f0:	f7ff ff90 	bl	8002714 <oled_WriteCommand>
	oled_WriteCommand(0xA1);
 80027f4:	20a1      	movs	r0, #161	; 0xa1
 80027f6:	f7ff ff8d 	bl	8002714 <oled_WriteCommand>
	oled_WriteCommand(0xA6);
 80027fa:	20a6      	movs	r0, #166	; 0xa6
 80027fc:	f7ff ff8a 	bl	8002714 <oled_WriteCommand>
	oled_WriteCommand(0xA8);
 8002800:	20a8      	movs	r0, #168	; 0xa8
 8002802:	f7ff ff87 	bl	8002714 <oled_WriteCommand>
	oled_WriteCommand(0x3F);
 8002806:	203f      	movs	r0, #63	; 0x3f
 8002808:	f7ff ff84 	bl	8002714 <oled_WriteCommand>
	oled_WriteCommand(0xA4);
 800280c:	20a4      	movs	r0, #164	; 0xa4
 800280e:	f7ff ff81 	bl	8002714 <oled_WriteCommand>
	oled_WriteCommand(0xD3);
 8002812:	20d3      	movs	r0, #211	; 0xd3
 8002814:	f7ff ff7e 	bl	8002714 <oled_WriteCommand>
	oled_WriteCommand(0x00);
 8002818:	2000      	movs	r0, #0
 800281a:	f7ff ff7b 	bl	8002714 <oled_WriteCommand>
	oled_WriteCommand(0xD5);
 800281e:	20d5      	movs	r0, #213	; 0xd5
 8002820:	f7ff ff78 	bl	8002714 <oled_WriteCommand>
	oled_WriteCommand(0xF0);
 8002824:	20f0      	movs	r0, #240	; 0xf0
 8002826:	f7ff ff75 	bl	8002714 <oled_WriteCommand>
	oled_WriteCommand(0xD9);
 800282a:	20d9      	movs	r0, #217	; 0xd9
 800282c:	f7ff ff72 	bl	8002714 <oled_WriteCommand>
	oled_WriteCommand(0x22);
 8002830:	2022      	movs	r0, #34	; 0x22
 8002832:	f7ff ff6f 	bl	8002714 <oled_WriteCommand>
	oled_WriteCommand(0xDA);
 8002836:	20da      	movs	r0, #218	; 0xda
 8002838:	f7ff ff6c 	bl	8002714 <oled_WriteCommand>
	oled_WriteCommand(0x12);
 800283c:	2012      	movs	r0, #18
 800283e:	f7ff ff69 	bl	8002714 <oled_WriteCommand>
	oled_WriteCommand(0xDB);
 8002842:	20db      	movs	r0, #219	; 0xdb
 8002844:	f7ff ff66 	bl	8002714 <oled_WriteCommand>
	oled_WriteCommand(0x20);
 8002848:	2020      	movs	r0, #32
 800284a:	f7ff ff63 	bl	8002714 <oled_WriteCommand>
	oled_WriteCommand(0x8D);
 800284e:	208d      	movs	r0, #141	; 0x8d
 8002850:	f7ff ff60 	bl	8002714 <oled_WriteCommand>
	oled_WriteCommand(0x14);
 8002854:	2014      	movs	r0, #20
 8002856:	f7ff ff5d 	bl	8002714 <oled_WriteCommand>
	oled_WriteCommand(0xAF);
 800285a:	20af      	movs	r0, #175	; 0xaf
 800285c:	f7ff ff5a 	bl	8002714 <oled_WriteCommand>
	oled_Fill(Black);
 8002860:	2000      	movs	r0, #0
 8002862:	f7ff ff6d 	bl	8002740 <oled_Fill>
	oled_UpdateScreen();
 8002866:	f7ff ff7b 	bl	8002760 <oled_UpdateScreen>
	OLED.CurrentX = 0;
 800286a:	4b05      	ldr	r3, [pc, #20]	; (8002880 <oled_Init+0xd0>)
 800286c:	2200      	movs	r2, #0
 800286e:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	OLED.CurrentY = 0;
 8002872:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
	OLED.Initialized = 1;
 8002876:	2001      	movs	r0, #1
 8002878:	f883 0405 	strb.w	r0, [r3, #1029]	; 0x405
}
 800287c:	bd08      	pop	{r3, pc}
 800287e:	bf00      	nop
 8002880:	20000b58 	.word	0x20000b58

08002884 <oled_DrawPixel>:

void oled_DrawPixel(uint8_t x, uint8_t y, OLED_COLOR color) {
	if (x >= OLED_WIDTH || y >= OLED_HEIGHT) {
 8002884:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002888:	d116      	bne.n	80028b8 <oled_DrawPixel+0x34>
 800288a:	293f      	cmp	r1, #63	; 0x3f
 800288c:	d814      	bhi.n	80028b8 <oled_DrawPixel+0x34>
		return;
	}

	if (OLED.Inverted) {
 800288e:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <oled_DrawPixel+0x50>)
 8002890:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 8002894:	b113      	cbz	r3, 800289c <oled_DrawPixel+0x18>
		color = (OLED_COLOR)!color;
 8002896:	fab2 f282 	clz	r2, r2
 800289a:	0952      	lsrs	r2, r2, #5
	}

	if (color == White) {
 800289c:	2a01      	cmp	r2, #1
 800289e:	d00c      	beq.n	80028ba <oled_DrawPixel+0x36>
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] |= 1 << (y % 8);
	} else {
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] &= ~(1 << (y % 8));
 80028a0:	08cb      	lsrs	r3, r1, #3
 80028a2:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80028a6:	f001 0107 	and.w	r1, r1, #7
 80028aa:	2301      	movs	r3, #1
 80028ac:	408b      	lsls	r3, r1
 80028ae:	4a09      	ldr	r2, [pc, #36]	; (80028d4 <oled_DrawPixel+0x50>)
 80028b0:	5c11      	ldrb	r1, [r2, r0]
 80028b2:	ea21 0103 	bic.w	r1, r1, r3
 80028b6:	5411      	strb	r1, [r2, r0]
	}
}
 80028b8:	4770      	bx	lr
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] |= 1 << (y % 8);
 80028ba:	08cb      	lsrs	r3, r1, #3
 80028bc:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80028c0:	f001 0107 	and.w	r1, r1, #7
 80028c4:	2301      	movs	r3, #1
 80028c6:	408b      	lsls	r3, r1
 80028c8:	4a02      	ldr	r2, [pc, #8]	; (80028d4 <oled_DrawPixel+0x50>)
 80028ca:	5c11      	ldrb	r1, [r2, r0]
 80028cc:	4319      	orrs	r1, r3
 80028ce:	5411      	strb	r1, [r2, r0]
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	20000b58 	.word	0x20000b58

080028d8 <oled_WriteChar>:
	oled_DrawHLine(x1, x2, y1, color);
	oled_DrawHLine(x1, x2, y2, color);
	oled_DrawVLine(y1, y2, x1, color);
	oled_DrawVLine(y1, y2, x2, color);
}
char oled_WriteChar(char ch, FontDef Font, OLED_COLOR color) {
 80028d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	4681      	mov	r9, r0
 80028e0:	a802      	add	r0, sp, #8
 80028e2:	e900 0006 	stmdb	r0, {r1, r2}
 80028e6:	4698      	mov	r8, r3
	uint32_t i, b, j;

	if (OLED_WIDTH <= (OLED.CurrentX + Font.FontWidth) ||
 80028e8:	4b27      	ldr	r3, [pc, #156]	; (8002988 <oled_WriteChar+0xb0>)
 80028ea:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80028ee:	f89d 6000 	ldrb.w	r6, [sp]
 80028f2:	4433      	add	r3, r6
 80028f4:	2b7f      	cmp	r3, #127	; 0x7f
 80028f6:	dc42      	bgt.n	800297e <oled_WriteChar+0xa6>
			OLED_HEIGHT <= (OLED.CurrentY + Font.FontHeight)) {
 80028f8:	4b23      	ldr	r3, [pc, #140]	; (8002988 <oled_WriteChar+0xb0>)
 80028fa:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80028fe:	f89d a001 	ldrb.w	sl, [sp, #1]
 8002902:	4453      	add	r3, sl
	if (OLED_WIDTH <= (OLED.CurrentX + Font.FontWidth) ||
 8002904:	2b3f      	cmp	r3, #63	; 0x3f
 8002906:	dc3c      	bgt.n	8002982 <oled_WriteChar+0xaa>
		return 0;
	}

	for (i = 0; i < Font.FontHeight; i++) {
 8002908:	2500      	movs	r5, #0
 800290a:	e023      	b.n	8002954 <oled_WriteChar+0x7c>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
		for (j = 0; j < Font.FontWidth; j++) {
			if ((b << j) & 0x8000) {
				oled_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR) color);
			} else {
				oled_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR)!color);
 800290c:	4b1e      	ldr	r3, [pc, #120]	; (8002988 <oled_WriteChar+0xb0>)
 800290e:	f8b3 0400 	ldrh.w	r0, [r3, #1024]	; 0x400
 8002912:	f8b3 1402 	ldrh.w	r1, [r3, #1026]	; 0x402
 8002916:	4429      	add	r1, r5
 8002918:	4420      	add	r0, r4
 800291a:	fab8 f288 	clz	r2, r8
 800291e:	0952      	lsrs	r2, r2, #5
 8002920:	b2c9      	uxtb	r1, r1
 8002922:	b2c0      	uxtb	r0, r0
 8002924:	f7ff ffae 	bl	8002884 <oled_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++) {
 8002928:	3401      	adds	r4, #1
 800292a:	42a6      	cmp	r6, r4
 800292c:	d911      	bls.n	8002952 <oled_WriteChar+0x7a>
			if ((b << j) & 0x8000) {
 800292e:	fa07 f304 	lsl.w	r3, r7, r4
 8002932:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002936:	d0e9      	beq.n	800290c <oled_WriteChar+0x34>
				oled_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR) color);
 8002938:	4b13      	ldr	r3, [pc, #76]	; (8002988 <oled_WriteChar+0xb0>)
 800293a:	f8b3 0400 	ldrh.w	r0, [r3, #1024]	; 0x400
 800293e:	f8b3 1402 	ldrh.w	r1, [r3, #1026]	; 0x402
 8002942:	4429      	add	r1, r5
 8002944:	4420      	add	r0, r4
 8002946:	4642      	mov	r2, r8
 8002948:	b2c9      	uxtb	r1, r1
 800294a:	b2c0      	uxtb	r0, r0
 800294c:	f7ff ff9a 	bl	8002884 <oled_DrawPixel>
 8002950:	e7ea      	b.n	8002928 <oled_WriteChar+0x50>
	for (i = 0; i < Font.FontHeight; i++) {
 8002952:	3501      	adds	r5, #1
 8002954:	45aa      	cmp	sl, r5
 8002956:	d908      	bls.n	800296a <oled_WriteChar+0x92>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002958:	f1a9 0320 	sub.w	r3, r9, #32
 800295c:	fb03 530a 	mla	r3, r3, sl, r5
 8002960:	9a01      	ldr	r2, [sp, #4]
 8002962:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
		for (j = 0; j < Font.FontWidth; j++) {
 8002966:	2400      	movs	r4, #0
 8002968:	e7df      	b.n	800292a <oled_WriteChar+0x52>
			}
		}
	}

	OLED.CurrentX += Font.FontWidth;
 800296a:	4b07      	ldr	r3, [pc, #28]	; (8002988 <oled_WriteChar+0xb0>)
 800296c:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 8002970:	4416      	add	r6, r2
 8002972:	f8a3 6400 	strh.w	r6, [r3, #1024]	; 0x400

	return ch;
 8002976:	4648      	mov	r0, r9
}
 8002978:	b002      	add	sp, #8
 800297a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
 800297e:	2000      	movs	r0, #0
 8002980:	e7fa      	b.n	8002978 <oled_WriteChar+0xa0>
 8002982:	2000      	movs	r0, #0
 8002984:	e7f8      	b.n	8002978 <oled_WriteChar+0xa0>
 8002986:	bf00      	nop
 8002988:	20000b58 	.word	0x20000b58

0800298c <oled_WriteString>:


char oled_WriteString(char* str, FontDef Font, OLED_COLOR color) {
 800298c:	b530      	push	{r4, r5, lr}
 800298e:	b083      	sub	sp, #12
 8002990:	4604      	mov	r4, r0
 8002992:	a802      	add	r0, sp, #8
 8002994:	e900 0006 	stmdb	r0, {r1, r2}
 8002998:	461d      	mov	r5, r3
	while (*str) {
 800299a:	e000      	b.n	800299e <oled_WriteString+0x12>
		if (oled_WriteChar(*str, Font, color) != *str) {
			return *str;
		}
		str++;
 800299c:	3401      	adds	r4, #1
	while (*str) {
 800299e:	7820      	ldrb	r0, [r4, #0]
 80029a0:	b148      	cbz	r0, 80029b6 <oled_WriteString+0x2a>
		if (oled_WriteChar(*str, Font, color) != *str) {
 80029a2:	462b      	mov	r3, r5
 80029a4:	aa02      	add	r2, sp, #8
 80029a6:	e912 0006 	ldmdb	r2, {r1, r2}
 80029aa:	f7ff ff95 	bl	80028d8 <oled_WriteChar>
 80029ae:	4602      	mov	r2, r0
 80029b0:	7820      	ldrb	r0, [r4, #0]
 80029b2:	4282      	cmp	r2, r0
 80029b4:	d0f2      	beq.n	800299c <oled_WriteString+0x10>
	}
	return *str;
}
 80029b6:	b003      	add	sp, #12
 80029b8:	bd30      	pop	{r4, r5, pc}
	...

080029bc <oled_SetCursor>:

void oled_SetCursor(uint8_t x, uint8_t y) {
	OLED.CurrentX = x;
 80029bc:	4b02      	ldr	r3, [pc, #8]	; (80029c8 <oled_SetCursor+0xc>)
 80029be:	f8a3 0400 	strh.w	r0, [r3, #1024]	; 0x400
	OLED.CurrentY = y;
 80029c2:	f8a3 1402 	strh.w	r1, [r3, #1026]	; 0x402
}
 80029c6:	4770      	bx	lr
 80029c8:	20000b58 	.word	0x20000b58

080029cc <PCA9538_Read_Register>:
#include "main.h"
#include "i2c.h"
#include "sdk_uart.h"
#include "pca9538.h"

HAL_StatusTypeDef PCA9538_Read_Register(uint16_t addr, pca9538_regs_t reg, uint8_t* buf) {
 80029cc:	b500      	push	{lr}
 80029ce:	b085      	sub	sp, #20
	return HAL_I2C_Mem_Read(&hi2c1, addr | 1, reg, 1, buf, 1, 100);
 80029d0:	2364      	movs	r3, #100	; 0x64
 80029d2:	9302      	str	r3, [sp, #8]
 80029d4:	2301      	movs	r3, #1
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	9200      	str	r2, [sp, #0]
 80029da:	460a      	mov	r2, r1
 80029dc:	ea40 0103 	orr.w	r1, r0, r3
 80029e0:	4802      	ldr	r0, [pc, #8]	; (80029ec <PCA9538_Read_Register+0x20>)
 80029e2:	f7fe fb01 	bl	8000fe8 <HAL_I2C_Mem_Read>
}
 80029e6:	b005      	add	sp, #20
 80029e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80029ec:	20000b04 	.word	0x20000b04

080029f0 <PCA9538_Write_Register>:


HAL_StatusTypeDef PCA9538_Write_Register(uint16_t addr, pca9538_regs_t reg, uint8_t* buf) {
 80029f0:	b500      	push	{lr}
 80029f2:	b085      	sub	sp, #20
	return HAL_I2C_Mem_Write(&hi2c1, addr & 0xFFFE, reg, 1, buf, 1, 100);
 80029f4:	f020 0001 	bic.w	r0, r0, #1
 80029f8:	2364      	movs	r3, #100	; 0x64
 80029fa:	9302      	str	r3, [sp, #8]
 80029fc:	2301      	movs	r3, #1
 80029fe:	9301      	str	r3, [sp, #4]
 8002a00:	9200      	str	r2, [sp, #0]
 8002a02:	460a      	mov	r2, r1
 8002a04:	4601      	mov	r1, r0
 8002a06:	4803      	ldr	r0, [pc, #12]	; (8002a14 <PCA9538_Write_Register+0x24>)
 8002a08:	f7fe fa3c 	bl	8000e84 <HAL_I2C_Mem_Write>
}
 8002a0c:	b005      	add	sp, #20
 8002a0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a12:	bf00      	nop
 8002a14:	20000b04 	.word	0x20000b04

08002a18 <PCA9538_Read_Inputs>:
	}

	return ret;
}

HAL_StatusTypeDef PCA9538_Read_Inputs(uint16_t addr, uint8_t* buf) {
 8002a18:	b508      	push	{r3, lr}
 8002a1a:	460a      	mov	r2, r1
	return PCA9538_Read_Register(addr, INPUT_PORT, buf);
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	f7ff ffd5 	bl	80029cc <PCA9538_Read_Register>
}
 8002a22:	bd08      	pop	{r3, pc}

08002a24 <UART_Transmit>:
#include "sdk_uart.h"
#include "usart.h"
#include <string.h>


void UART_Transmit(uint8_t data[]){
 8002a24:	b510      	push	{r4, lr}
 8002a26:	4604      	mov	r4, r0
	HAL_UART_Transmit(&huart6, data, strlen((const char*)data), 1000);
 8002a28:	f7fd fbce 	bl	80001c8 <strlen>
 8002a2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a30:	b282      	uxth	r2, r0
 8002a32:	4621      	mov	r1, r4
 8002a34:	4801      	ldr	r0, [pc, #4]	; (8002a3c <UART_Transmit+0x18>)
 8002a36:	f7ff fae4 	bl	8002002 <HAL_UART_Transmit>
}
 8002a3a:	bd10      	pop	{r4, pc}
 8002a3c:	20000fa0 	.word	0x20000fa0

08002a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a40:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a42:	2100      	movs	r1, #0
 8002a44:	9100      	str	r1, [sp, #0]
 8002a46:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <HAL_MspInit+0x34>)
 8002a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a4e:	645a      	str	r2, [r3, #68]	; 0x44
 8002a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a52:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002a56:	9200      	str	r2, [sp, #0]
 8002a58:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a5a:	9101      	str	r1, [sp, #4]
 8002a5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a5e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a62:	641a      	str	r2, [r3, #64]	; 0x40
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a6e:	b002      	add	sp, #8
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800

08002a78 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a78:	4770      	bx	lr

08002a7a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a7a:	e7fe      	b.n	8002a7a <HardFault_Handler>

08002a7c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a7c:	e7fe      	b.n	8002a7c <MemManage_Handler>

08002a7e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a7e:	e7fe      	b.n	8002a7e <BusFault_Handler>

08002a80 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a80:	e7fe      	b.n	8002a80 <UsageFault_Handler>

08002a82 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a82:	4770      	bx	lr

08002a84 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a84:	4770      	bx	lr

08002a86 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a86:	4770      	bx	lr

08002a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a8a:	f7fd fd65 	bl	8000558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a8e:	bd08      	pop	{r3, pc}

08002a90 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a90:	490f      	ldr	r1, [pc, #60]	; (8002ad0 <SystemInit+0x40>)
 8002a92:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002a96:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002a9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <SystemInit+0x44>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002ab2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ab6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002ab8:	4a07      	ldr	r2, [pc, #28]	; (8002ad8 <SystemInit+0x48>)
 8002aba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ac2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002ac4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ac6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002aca:	608b      	str	r3, [r1, #8]
#endif
}
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	e000ed00 	.word	0xe000ed00
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	24003010 	.word	0x24003010

08002adc <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM2)
 8002adc:	6803      	ldr	r3, [r0, #0]
 8002ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae2:	d000      	beq.n	8002ae6 <HAL_TIM_PWM_MspInit+0xa>
 8002ae4:	4770      	bx	lr
{
 8002ae6:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ae8:	2300      	movs	r3, #0
 8002aea:	9301      	str	r3, [sp, #4]
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_TIM_PWM_MspInit+0x28>)
 8002aee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002af0:	f042 0201 	orr.w	r2, r2, #1
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	9301      	str	r3, [sp, #4]
 8002afe:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002b00:	b002      	add	sp, #8
 8002b02:	4770      	bx	lr
 8002b04:	40023800 	.word	0x40023800

08002b08 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b08:	b500      	push	{lr}
 8002b0a:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	9301      	str	r3, [sp, #4]
 8002b10:	9302      	str	r3, [sp, #8]
 8002b12:	9303      	str	r3, [sp, #12]
 8002b14:	9304      	str	r3, [sp, #16]
 8002b16:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM2)
 8002b18:	6803      	ldr	r3, [r0, #0]
 8002b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1e:	d002      	beq.n	8002b26 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002b20:	b007      	add	sp, #28
 8002b22:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <HAL_TIM_MspPostInit+0x4c>)
 8002b2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	631a      	str	r2, [r3, #48]	; 0x30
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002b3e:	2320      	movs	r3, #32
 8002b40:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b42:	2302      	movs	r3, #2
 8002b44:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b46:	2301      	movs	r3, #1
 8002b48:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4a:	a901      	add	r1, sp, #4
 8002b4c:	4802      	ldr	r0, [pc, #8]	; (8002b58 <HAL_TIM_MspPostInit+0x50>)
 8002b4e:	f7fd fd87 	bl	8000660 <HAL_GPIO_Init>
}
 8002b52:	e7e5      	b.n	8002b20 <HAL_TIM_MspPostInit+0x18>
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40020000 	.word	0x40020000

08002b5c <MX_TIM2_Init>:
{
 8002b5c:	b500      	push	{lr}
 8002b5e:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b60:	2300      	movs	r3, #0
 8002b62:	9308      	str	r3, [sp, #32]
 8002b64:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b66:	9301      	str	r3, [sp, #4]
 8002b68:	9302      	str	r3, [sp, #8]
 8002b6a:	9303      	str	r3, [sp, #12]
 8002b6c:	9304      	str	r3, [sp, #16]
 8002b6e:	9305      	str	r3, [sp, #20]
 8002b70:	9306      	str	r3, [sp, #24]
 8002b72:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 8002b74:	4817      	ldr	r0, [pc, #92]	; (8002bd4 <MX_TIM2_Init+0x78>)
 8002b76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b7a:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 8002b7c:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b7e:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 10;
 8002b80:	220a      	movs	r2, #10
 8002b82:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b84:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b86:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002b88:	f7fe ffb6 	bl	8001af8 <HAL_TIM_PWM_Init>
 8002b8c:	b9c0      	cbnz	r0, 8002bc0 <MX_TIM2_Init+0x64>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b92:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b94:	a908      	add	r1, sp, #32
 8002b96:	480f      	ldr	r0, [pc, #60]	; (8002bd4 <MX_TIM2_Init+0x78>)
 8002b98:	f7ff f89e 	bl	8001cd8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b9c:	b998      	cbnz	r0, 8002bc6 <MX_TIM2_Init+0x6a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b9e:	2360      	movs	r3, #96	; 0x60
 8002ba0:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ba6:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ba8:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002baa:	a901      	add	r1, sp, #4
 8002bac:	4809      	ldr	r0, [pc, #36]	; (8002bd4 <MX_TIM2_Init+0x78>)
 8002bae:	f7fe fff5 	bl	8001b9c <HAL_TIM_PWM_ConfigChannel>
 8002bb2:	b958      	cbnz	r0, 8002bcc <MX_TIM2_Init+0x70>
  HAL_TIM_MspPostInit(&htim2);
 8002bb4:	4807      	ldr	r0, [pc, #28]	; (8002bd4 <MX_TIM2_Init+0x78>)
 8002bb6:	f7ff ffa7 	bl	8002b08 <HAL_TIM_MspPostInit>
}
 8002bba:	b00b      	add	sp, #44	; 0x2c
 8002bbc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002bc0:	f7ff fda7 	bl	8002712 <Error_Handler>
 8002bc4:	e7e3      	b.n	8002b8e <MX_TIM2_Init+0x32>
    Error_Handler();
 8002bc6:	f7ff fda4 	bl	8002712 <Error_Handler>
 8002bca:	e7e8      	b.n	8002b9e <MX_TIM2_Init+0x42>
    Error_Handler();
 8002bcc:	f7ff fda1 	bl	8002712 <Error_Handler>
 8002bd0:	e7f0      	b.n	8002bb4 <MX_TIM2_Init+0x58>
 8002bd2:	bf00      	nop
 8002bd4:	20000f60 	.word	0x20000f60

08002bd8 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002bd8:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 8002bda:	480a      	ldr	r0, [pc, #40]	; (8002c04 <MX_USART6_UART_Init+0x2c>)
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <MX_USART6_UART_Init+0x30>)
 8002bde:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 115200;
 8002be0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002be4:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002be6:	2300      	movs	r3, #0
 8002be8:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002bea:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002bec:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002bee:	220c      	movs	r2, #12
 8002bf0:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bf2:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bf4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002bf6:	f7ff f9d5 	bl	8001fa4 <HAL_UART_Init>
 8002bfa:	b900      	cbnz	r0, 8002bfe <MX_USART6_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 8002bfc:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002bfe:	f7ff fd88 	bl	8002712 <Error_Handler>
}
 8002c02:	e7fb      	b.n	8002bfc <MX_USART6_UART_Init+0x24>
 8002c04:	20000fa0 	.word	0x20000fa0
 8002c08:	40011400 	.word	0x40011400

08002c0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c0c:	b500      	push	{lr}
 8002c0e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c10:	2300      	movs	r3, #0
 8002c12:	9303      	str	r3, [sp, #12]
 8002c14:	9304      	str	r3, [sp, #16]
 8002c16:	9305      	str	r3, [sp, #20]
 8002c18:	9306      	str	r3, [sp, #24]
 8002c1a:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART6)
 8002c1c:	6802      	ldr	r2, [r0, #0]
 8002c1e:	4b15      	ldr	r3, [pc, #84]	; (8002c74 <HAL_UART_MspInit+0x68>)
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d002      	beq.n	8002c2a <HAL_UART_MspInit+0x1e>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002c24:	b009      	add	sp, #36	; 0x24
 8002c26:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART6_CLK_ENABLE();
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	9101      	str	r1, [sp, #4]
 8002c2e:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 8002c32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c34:	f042 0220 	orr.w	r2, r2, #32
 8002c38:	645a      	str	r2, [r3, #68]	; 0x44
 8002c3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c3c:	f002 0220 	and.w	r2, r2, #32
 8002c40:	9201      	str	r2, [sp, #4]
 8002c42:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c44:	9102      	str	r1, [sp, #8]
 8002c46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c48:	f042 0204 	orr.w	r2, r2, #4
 8002c4c:	631a      	str	r2, [r3, #48]	; 0x30
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	9302      	str	r3, [sp, #8]
 8002c56:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c58:	23c0      	movs	r3, #192	; 0xc0
 8002c5a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c60:	2303      	movs	r3, #3
 8002c62:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002c64:	2308      	movs	r3, #8
 8002c66:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c68:	a903      	add	r1, sp, #12
 8002c6a:	4803      	ldr	r0, [pc, #12]	; (8002c78 <HAL_UART_MspInit+0x6c>)
 8002c6c:	f7fd fcf8 	bl	8000660 <HAL_GPIO_Init>
}
 8002c70:	e7d8      	b.n	8002c24 <HAL_UART_MspInit+0x18>
 8002c72:	bf00      	nop
 8002c74:	40011400 	.word	0x40011400
 8002c78:	40020800 	.word	0x40020800

08002c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cb4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c82:	e003      	b.n	8002c8c <LoopCopyDataInit>

08002c84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c84:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c8a:	3104      	adds	r1, #4

08002c8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c8c:	480b      	ldr	r0, [pc, #44]	; (8002cbc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c8e:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c94:	d3f6      	bcc.n	8002c84 <CopyDataInit>
  ldr  r2, =_sbss
 8002c96:	4a0b      	ldr	r2, [pc, #44]	; (8002cc4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c98:	e002      	b.n	8002ca0 <LoopFillZerobss>

08002c9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c9c:	f842 3b04 	str.w	r3, [r2], #4

08002ca0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ca0:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002ca2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ca4:	d3f9      	bcc.n	8002c9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ca6:	f7ff fef3 	bl	8002a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002caa:	f000 f811 	bl	8002cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cae:	f7ff fd1b 	bl	80026e8 <main>
  bx  lr    
 8002cb2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002cb4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002cb8:	0800566c 	.word	0x0800566c
  ldr  r0, =_sdata
 8002cbc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002cc0:	20000ae4 	.word	0x20000ae4
  ldr  r2, =_sbss
 8002cc4:	20000ae4 	.word	0x20000ae4
  ldr  r3, = _ebss
 8002cc8:	20000fe0 	.word	0x20000fe0

08002ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ccc:	e7fe      	b.n	8002ccc <ADC_IRQHandler>
	...

08002cd0 <__libc_init_array>:
 8002cd0:	b570      	push	{r4, r5, r6, lr}
 8002cd2:	4d0d      	ldr	r5, [pc, #52]	; (8002d08 <__libc_init_array+0x38>)
 8002cd4:	4c0d      	ldr	r4, [pc, #52]	; (8002d0c <__libc_init_array+0x3c>)
 8002cd6:	1b64      	subs	r4, r4, r5
 8002cd8:	10a4      	asrs	r4, r4, #2
 8002cda:	2600      	movs	r6, #0
 8002cdc:	42a6      	cmp	r6, r4
 8002cde:	d109      	bne.n	8002cf4 <__libc_init_array+0x24>
 8002ce0:	4d0b      	ldr	r5, [pc, #44]	; (8002d10 <__libc_init_array+0x40>)
 8002ce2:	4c0c      	ldr	r4, [pc, #48]	; (8002d14 <__libc_init_array+0x44>)
 8002ce4:	f000 f820 	bl	8002d28 <_init>
 8002ce8:	1b64      	subs	r4, r4, r5
 8002cea:	10a4      	asrs	r4, r4, #2
 8002cec:	2600      	movs	r6, #0
 8002cee:	42a6      	cmp	r6, r4
 8002cf0:	d105      	bne.n	8002cfe <__libc_init_array+0x2e>
 8002cf2:	bd70      	pop	{r4, r5, r6, pc}
 8002cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cf8:	4798      	blx	r3
 8002cfa:	3601      	adds	r6, #1
 8002cfc:	e7ee      	b.n	8002cdc <__libc_init_array+0xc>
 8002cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d02:	4798      	blx	r3
 8002d04:	3601      	adds	r6, #1
 8002d06:	e7f2      	b.n	8002cee <__libc_init_array+0x1e>
 8002d08:	08005664 	.word	0x08005664
 8002d0c:	08005664 	.word	0x08005664
 8002d10:	08005664 	.word	0x08005664
 8002d14:	08005668 	.word	0x08005668

08002d18 <memset>:
 8002d18:	4402      	add	r2, r0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d100      	bne.n	8002d22 <memset+0xa>
 8002d20:	4770      	bx	lr
 8002d22:	f803 1b01 	strb.w	r1, [r3], #1
 8002d26:	e7f9      	b.n	8002d1c <memset+0x4>

08002d28 <_init>:
 8002d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d2a:	bf00      	nop
 8002d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d2e:	bc08      	pop	{r3}
 8002d30:	469e      	mov	lr, r3
 8002d32:	4770      	bx	lr

08002d34 <_fini>:
 8002d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d36:	bf00      	nop
 8002d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d3a:	bc08      	pop	{r3}
 8002d3c:	469e      	mov	lr, r3
 8002d3e:	4770      	bx	lr
